[{"path":"https://drives-project.github.io/drivesR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 USDA-ARS Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://drives-project.github.io/drivesR/articles/drivesR-data-use.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Workflow for using DRIVES database tables with drivesR","text":"install drivesR package, use install_github function devtools package.","code":"devtools::install_github(\"DRIVES-project/drivesR\", ref = \"main\") library(drivesR)"},{"path":[]},{"path":"https://drives-project.github.io/drivesR/articles/drivesR-data-use.html","id":"requesting-access","dir":"Articles","previous_headings":"Accessing the DRIVES database","what":"Requesting access","title":"Workflow for using DRIVES database tables with drivesR","text":"DRIVES database hosted data.drives-network.org/. ask anyone interesting using DRIVES data complete data request form. Direct collaborators project members can request access directly DRIVES data manager. Either way, receive email username, password, API key. can use username password log Directus Data Studio Application, can change password view tables graphical interface. can download tables application, recommend drivesR package. API key need access data drivesR package. complete request process, receive Directus API key set user permissions. string random letters numbers. use package, Directus API key must formatted, “Bearer APIKEY”. ’s best practice never hard-code API key script. recommend making setup script sourced scripts (sure add .gitignore ’re using github). Alternatively, can use script read API key non-indexed location. code generates empty script file working directory opens R studio. empty script file, can add something like , replacing MYAPI key API key received.","code":"usethis::edit_file(\"directus_creds.R\") directus_token = \"Bearer MYAPIKEY\""},{"path":"https://drives-project.github.io/drivesR/articles/drivesR-data-use.html","id":"setup-steps","dir":"Articles","previous_headings":"Accessing the DRIVES database","what":"Setup steps","title":"Workflow for using DRIVES database tables with drivesR","text":"format setup script described , include lines code beginning every script downloads DRIVES tables: last line sets global option Directus token used functions drivesR package. can view option getOption(“drivesR.default.directus.token”). DRIVES collaborators project members full read-access need add one extra line: default, drivesR package reads data tables approved public access privileges, excludes certain sites site-years. function allows approved users access full database.","code":"library(drivesR) source(\"directus_creds.R\") set_default_token(directus_token) set_public_access(public = FALSE)"},{"path":"https://drives-project.github.io/drivesR/articles/drivesR-data-use.html","id":"downloading-drives-tables-","dir":"Articles","previous_headings":"Accessing the DRIVES database","what":"Downloading DRIVES tables.","title":"Workflow for using DRIVES database tables with drivesR","text":"drivesR package several options accessing DRIVES database tables Download individual tables. get_db_table function uses table names inputs. can see names tables available public access running code package loaded (excludes dictionary tables available without API key). Download multiple tables . import_db_tables function accesses multiple tables . can used several ways depending workflow system limitations. argument “tablevec” determines database tables downloaded. default, function downloads tables getOption(“drivesR.default.tablevec”). set NULL, function download tables available user role. can also provide vector table names. remaining examples, ’ll assume default “tablevec” option. argument “fetch_option” controls whether tables imported list global R environment (“download.”), saved specified directory (“save.”), (“download.”). also option read tables local directory downloaded (“upload”). latter option allows rerun code without repeat time-consuming step downloading tables. example, run following code download tables list global R environment saved RData file local directory: , can move comment rerun code load tables local directory: Importing tables list global R environment convenient downstream analysis, can take lot working memory. working memory limiting, can bypass step setting fetch_option “save.”. save_option argument allows specify want tables saved. default R data object list tables (“list”). can also save tables separate rds csv files. systems limited working memory, may work better save tables separate files load individual tables needed. Users plan work data tables outside R may want save tables separate CSV files locally:","code":"crop_info <- get_db_table(\"crop_info\") str(crop_info) #> 'data.frame':    91 obs. of  11 variables: #>  $ crop_id            : chr  \"alfalfa\" \"alfalfa mix\" \"alfalfa plus\" \"annual grass-forb mix\" ... #>  $ parent_crop_id     : chr  \"alfalfa plus\" \"alfalfa plus\" NA \"annual mix\" ... #>  $ species_name       : chr  \"Medicago sativa L.\" NA NA NA ... #>  $ is_a_mix           : logi  FALSE TRUE TRUE TRUE TRUE TRUE ... #>  $ family             : chr  \"Fabaceae\" NA NA NA ... #>  $ perenniality       : chr  \"perennial\" \"perennial\" \"perennial\" \"annual\" ... #>  $ photosynthetic_mode: chr  \"C3\" NA NA NA ... #>  $ seasonality        : chr  \"warm season\" NA NA NA ... #>  $ base_temp_c        : int  5 NA NA NA NA NA NA NA NA NA ... #>  $ max_temp_c         : num  43.3 NA NA NA NA NA NA NA NA NA ... #>  $ gdd_references     : chr  \"Parsons et al 2006\" NA NA NA ... options(\"drivesR.default.tablevec\") #> $drivesR.default.tablevec #>  [1] \"crop_info\"                    \"crop_variety_info\"            \"crop_yields\"                  #>  [4] \"experimental_unit_info\"       \"experimental_unit_treatments\" \"harvest_dates\"                #>  [7] \"planting_info\"                \"rotation_id_info\"             \"rotation_phases\"              #> [10] \"site_info\"                    \"site_treatment_level_info\"    \"site_treatment_type_info\"     #> [13] \"treatment_id_components\"      \"treatment_id_info\"            \"weather_daily\"                #> [16] \"weather_station_info\" db <- import_db_tables(tablevec =  c(\"crop_yields\",\"site_info\",\"experimental_unit_treatments\")) db <- import_db_tables(fetch_option = \"download.save\",                        #fetch_option = \"upload\",                        savedir = \"data\",                        savename = \"sampledblist\") db <- import_db_tables(#fetch_option = \"download.save\",                        fetch_option = \"upload\",                        savedir = \"data\",                        savename = \"sampledblist\") #>  #> Imported list db with tables: #>  #> crop_info #> crop_variety_info #> crop_yields #> experimental_unit_info #> experimental_unit_treatments #> harvest_dates #> planting_info #> rotation_id_info #> rotation_phases #> site_info #> site_treatment_level_info #> site_treatment_type_info #> treatment_id_components #> treatment_id_info #> weather_daily #> weather_station_info db <- import_db_tables(fetch_option = \"save.only\",                        save_option = \"csv\",                        savedir = \"myChosenFolder\",                        savename = \"drives\"                         )"},{"path":"https://drives-project.github.io/drivesR/articles/drivesR-data-use.html","id":"database-metadata","dir":"Articles","previous_headings":"Accessing the DRIVES database","what":"Database metadata","title":"Workflow for using DRIVES database tables with drivesR","text":"database contains three data dictionary tables detailed descriptions tables, columns within tables, categorical variables. column dictionary includes details used generate database schema, including primary keys foreign key relationships. Dictionary tables can downloaded individually, using get_db_table function, list import_dictionary_tables. ’re interested seeing database structured Directus, can use get_db_info function view metadata endpoint API. example shows metadata table dictionary. output can formatted json dataframe. json option clearer representation information structured Directus. See https://directus.io/docs/api. information Directus API. One detail note non-dictionary tables approved public viewer access prefix “public_”. comes viewing tables Directus Studio App specifying API endpoints directly, shown .","code":"## separate: table_dictionary <- get_db_table(\"table_dictionary\") column_dictionary <- get_db_table(\"column_dictionary\")  ## together: dict <- import_dictionary_tables() table_dict_info <- get_db_info(mytarget = \"collections/table_dictionary\",                              output_format = \"json\") print(table_dict_info) #> { #>     \"data\": { #>         \"collection\": \"table_dictionary\", #>         \"meta\": { #>             \"collection\": \"table_dictionary\", #>             \"icon\": null, #>             \"note\": \"Describes tables within the DRIVES database (you're reading it now!). \\n One row per table. \", #>             \"display_template\": null, #>             \"hidden\": false, #>             \"singleton\": false, #>             \"translations\": null, #>             \"archive_field\": null, #>             \"archive_app_filter\": true, #>             \"archive_value\": null, #>             \"unarchive_value\": null, #>             \"sort_field\": null, #>             \"accountability\": \"all\", #>             \"color\": null, #>             \"item_duplication_fields\": null, #>             \"sort\": null, #>             \"group\": null, #>             \"collapse\": \"open\", #>             \"preview_url\": null, #>             \"versioning\": false #>         }, #>         \"schema\": { #>             \"schema\": \"public\", #>             \"name\": \"table_dictionary\", #>             \"comment\": null #>         } #>     } #> } #>"},{"path":"https://drives-project.github.io/drivesR/articles/drivesR-data-use.html","id":"harmonizing-drives-tables","dir":"Articles","previous_headings":"","what":"Harmonizing DRIVES tables","title":"Workflow for using DRIVES database tables with drivesR","text":"DRIVES database designed flexible various end-uses preserve much information possible within experiment. relational database design useful objectives, adds layer difficulty analyzing data. Therefore, drivesR package provides data harmonization functions reshape combine data tables ease downstream analysis. function arguments facilitate different end uses. start lower-level harmonization functions preserve information individual tables, higher level functions combine tables loss information.","code":""},{"path":"https://drives-project.github.io/drivesR/articles/drivesR-data-use.html","id":"crop-yields","dir":"Articles","previous_headings":"Harmonizing DRIVES tables","what":"1) Crop yields:","title":"Workflow for using DRIVES database tables with drivesR","text":"harmonize_yields function performs useful operations crop_yields table. table already downloaded, can used argument. Otherwise, function downloads table using Directus API. function performs light processing steps, calculating dry yields adding TRUE FALSE column cover crops. also provides option keep crop fractions crop/unit/year (e.g. grain straw) separate rows, rearrange columns.","code":"## without pre-downloaded tables: yields <- harmonize_yields() ## with pre-downloaded tables: crop_yields <- get_db_table(\"crop_yields\") yields <- harmonize_yields(crop_yields) ## or, if in a list: yields <- harmonize_yields(db$crop_yields) ## crop fractions in rows #crop_yields <- get_db_table(\"crop_yields\") yields <- harmonize_yields(db$crop_yields) # could be a separate dataframe or part of a list longyields <- harmonize_yields(db$crop_yields,                                crop_fractions_as_columns = FALSE) dim(longyields) #> [1] 65839    18 names(longyields) #>  [1] \"uid\"                         \"site_id\"                     \"unit_id\"                     #>  [4] \"harvest_year\"                \"rotation_phase\"              \"stand_year\"                  #>  [7] \"num_harvests\"                \"expected_crop_id\"            \"actual_crop_id\"              #> [10] \"measured_fraction\"           \"removed_from_field_tf\"       \"dry_yield_kg_ha\"             #> [13] \"yield_kg_ha\"                 \"yield_percent_moisture\"      \"moisture_type\"               #> [16] \"percent_moisture_at_harvest\" \"data_processing_note\"        \"cover_crop\" ## crop fractions in columns wideyields <- harmonize_yields(db$crop_yields,                                crop_fractions_as_columns = TRUE) dim(wideyields) #> [1] 47021    40 names(wideyields) # columns include suffix _1 for the primary fraction and _2, _3, etc. for other fractions. #>  [1] \"site_id\"                       \"unit_id\"                       \"harvest_year\"                  #>  [4] \"actual_crop_id\"                \"stand_year\"                    \"num_harvests\"                  #>  [7] \"rotation_phase\"                \"uid_1\"                         \"uid_2\"                         #> [10] \"uid_3\"                         \"expected_crop_id_1\"            \"expected_crop_id_2\"            #> [13] \"expected_crop_id_3\"            \"measured_fraction_1\"           \"measured_fraction_2\"           #> [16] \"measured_fraction_3\"           \"removed_from_field_tf_1\"       \"removed_from_field_tf_2\"       #> [19] \"removed_from_field_tf_3\"       \"dry_yield_kg_ha_1\"             \"dry_yield_kg_ha_2\"             #> [22] \"dry_yield_kg_ha_3\"             \"yield_kg_ha_1\"                 \"yield_kg_ha_2\"                 #> [25] \"yield_kg_ha_3\"                 \"yield_percent_moisture_1\"      \"yield_percent_moisture_2\"      #> [28] \"yield_percent_moisture_3\"      \"moisture_type_1\"               \"moisture_type_2\"               #> [31] \"moisture_type_3\"               \"percent_moisture_at_harvest_1\" \"percent_moisture_at_harvest_2\" #> [34] \"percent_moisture_at_harvest_3\" \"data_processing_note_1\"        \"data_processing_note_2\"        #> [37] \"data_processing_note_3\"        \"cover_crop_1\"                  \"cover_crop_2\"                  #> [40] \"cover_crop_3\""},{"path":"https://drives-project.github.io/drivesR/articles/drivesR-data-use.html","id":"experimental-treatments-and-design","dir":"Articles","previous_headings":"Harmonizing DRIVES tables","what":"2) Experimental treatments and design:","title":"Workflow for using DRIVES database tables with drivesR","text":"Information experimental treatments design organized across multiple tables DRIVES database. tables useful interact directly. Others require harmonization useful analysis. site_treatment_type_info: Provides information types experimental treatments site level. Treatments correspond core set management practices described sites. table includes textual descriptions information treatments factor experimental design. useful starting point evaluating management practices represented DRIVES database possibilities analysis. site_treatment_level_info: Provides information levels within treatment within site_treatment_type_info). rotation_id_info: Since DRIVES project centered around crop rotations, rotation information set tables separate treatments. site-specific rotation assigned unique rotation_id, described table, along useful overview information length, species richness, inclusion cover crops perennials. rotation_id included treatment_id_components. rotation_phases: Provides detailed information cropping sequence rotation_id. includes crop identifiers, timing planting harvest, crop functions (e.g., grain, cover), done different crop fractions (whether ’re measured, removed, retained). treatment_id_info: Combinations practices applied experimental unit assigned unique treatment_id. two types treatment ids: assigned based management practices alone (treatmentID1), assigned based management practices plus staggered rotation phases (treatmentID2). table lists treatment identifier, type, corresponding site_id. mainly exists merged next table. treatment_id_components: Specifies component treatment levels treatment_id. treatment levels relate back site_treatment_level_info rotation_id_info. table structured start end year treatment components accommodate changes time. experimental_unit_info: Provides spatial design information experimental units. Information includes type unit (split-plot, plot, block, etc.), relative position within field, directional orientation, parent units (split-plots within plots, plots within blocks. etc.). experimental_unit_treatments: Indicates treatment_ids applied experimental units years, organized start year end year. harmonize_treatments function takes information treatment_id_info treatment_id_components expands time-series data set one row per treatment_id/year separate columns treatment component. can useful exploratory analysis experimental designs. function accepts list database tables named treatment_id_info treatment_id_components. provided, fetches tables Directus database. harmonize_treatments_units function produces dataframe one row per unit_id year, separate columns treatment id component. structure allows merged yield data. Similar harmonization functions, accepts named list fetches tables database. full dataframe treatment components may little daunting. made function list_treatment_types_by_management_practice help subset column names corresponding particular management practices. uses information site_treatment_type_info table. function accepts table argument, fetches database.","code":"## tables provided trt <- harmonize_treatments(db) # db is a named list with 'treatment_id_info' and 'treatment_id_components'  # tables not provided trt <- harmonize_treatments() ## tables provided trtunit <- harmonize_treatments_units(db) # db is a named list with 'treatment_id_info', 'treatment_id_components', and 'experimental_unit_treatments'  # tables not provided trtunit <- harmonize_treatments_units() trt <- harmonize_treatments(db) #> Joining with `by = join_by(treatment_id)` trtlist <- list_treatments_by_management_practice(db$site_treatment_type_info) # lets say I wanted to extract information on N fertility treatments trtcolz <- trtlist$`N fertility` trtsubset <- trt[c(\"site_id\",\"year\", trtcolz)] head(trtsubset) #>   site_id year         N fertility nutrient management system N rate soil amendment grassland N addition #> 1   CATCE 2013 low input synthetic                       <NA>   <NA>           <NA>                 <NA> #> 2   CATCE 2014 low input synthetic                       <NA>   <NA>           <NA>                 <NA> #> 3   CATCE 2015 low input synthetic                       <NA>   <NA>           <NA>                 <NA> #> 4   CATCE 2016 low input synthetic                       <NA>   <NA>           <NA>                 <NA> #> 5   CATCE 2017 low input synthetic                       <NA>   <NA>           <NA>                 <NA> #> 6   CATCE 2018 low input synthetic                       <NA>   <NA>           <NA>                 <NA>"},{"path":"https://drives-project.github.io/drivesR/articles/drivesR-data-use.html","id":"management-data","dir":"Articles","previous_headings":"Harmonizing DRIVES tables","what":"3) Management data","title":"Workflow for using DRIVES database tables with drivesR","text":"Currently, DRIVES database two tables time-series management details. planting_info provides planting dates, variety identifiers, seeding rates every unit/year/crop available. includes separate rows components crop mixtures replanting, earlier plantings failied. level detail makes data little difficult work . harmonize_planting_info function offers several options simplify planting_info table one row per unit/year/crop/date. Multiple planting dates can retained separate rows columns, trimmed include latest planting date. Component crops within mixtures can retained separate columns excluded. See ?harmonize_planting_info details options output. Like harmonization functions, can accept planting_info table input fetch database. harvest_dates provides harvest dates every unit/year/crop available. includes separate rows multiple harvest dates (typical forages) crop fractions harvested different dates (rare). harmonize_harvest_dates function reshapes harvest_dates table multiple harvests separate columns (one row per unit/year/crop). option put crop fractions different harvest dates separate columns (rarely issue). Like harmonization functions, can accept planting_info table input fetch database","code":"#planting_info <- get_db_table(\"planting_info\") # can be a separate table or part of a list. p1 <- harmonize_planting_info(db$planting_info, replant_dates = \"latest\",include_component_crops = TRUE) dim(p1) #> [1] 44537    53 names(p1)# names have a numbered suffix for component crops in mixtures. #>  [1] \"site_id\"              \"unit_id\"              \"harvest_year\"         \"expected_crop_id\"     #>  [5] \"actual_crop_id\"       \"stand_year\"           \"rotation_phase\"       \"planting_date\"        #>  [9] \"date_index\"           \"replantedTF\"          \"component_crop_id_2\"  \"component_crop_id_1\"  #> [13] \"component_crop_id_3\"  \"component_crop_id_5\"  \"component_crop_id_4\"  \"component_crop_id_6\"  #> [17] \"component_crop_id_10\" \"component_crop_id_9\"  \"component_crop_id_7\"  \"component_crop_id_8\"  #> [21] \"variety_id_2\"         \"variety_id_1\"         \"variety_id_3\"         \"variety_id_5\"         #> [25] \"variety_id_4\"         \"variety_id_6\"         \"variety_id_10\"        \"variety_id_9\"         #> [29] \"variety_id_7\"         \"variety_id_8\"         \"planting_rate_2\"      \"planting_rate_1\"      #> [33] \"planting_rate_3\"      \"planting_rate_5\"      \"planting_rate_4\"      \"planting_rate_6\"      #> [37] \"planting_rate_10\"     \"planting_rate_9\"      \"planting_rate_7\"      \"planting_rate_8\"      #> [41] \"uid_2\"                \"uid_1\"                \"uid_3\"                \"uid_5\"                #> [45] \"uid_4\"                \"uid_6\"                \"uid_10\"               \"uid_9\"                #> [49] \"uid_7\"                \"uid_8\"                \"planting_units\"       \"material_planted\"     #> [53] \"planting_notes\" # And since replant_dates = 'latest', there is an added column replantedTF indicating whether a unit was replanted.  p2 <- harmonize_planting_info(db$planting_info, replant_dates = \"rows\",include_component_crops = FALSE) dim(p2) #> [1] 45019    18 names(p2) # All planting dates are included and organized under a date_index column. Since include_component_crops is FALSE, there is an added column num_components providing the number of component crops within each actual_crop_id. #>  [1] \"uid\"                 \"site_id\"             \"unit_id\"             \"expected_crop_id\"    \"actual_crop_id\"      #>  [6] \"stand_year\"          \"rotation_phase\"      \"phase_year_planting\" \"harvest_year\"        \"planting_year\"       #> [11] \"planting_date\"       \"variety_id\"          \"planting_rate\"       \"planting_units\"      \"material_planted\"    #> [16] \"planting_notes\"      \"date_index\"          \"num_components\"  p3 <- harmonize_planting_info(db$planting_info, replant_dates = \"columns\",include_component_crops = TRUE) dim(p3) #> [1] 44537    85 names(p3) # names include suffixes d and c for planting dates and component crops, respectively. #>  [1] \"site_id\"                  \"unit_id\"                  \"expected_crop_id\"         \"actual_crop_id\"           #>  [5] \"stand_year\"               \"rotation_phase\"           \"harvest_year\"             \"component_crop_id_d1_c2\"  #>  [9] \"component_crop_id_d1_c1\"  \"component_crop_id_d2_c1\"  \"component_crop_id_d1_c3\"  \"component_crop_id_d3_c1\"  #> [13] \"component_crop_id_d1_c5\"  \"component_crop_id_d1_c4\"  \"component_crop_id_d1_c6\"  \"component_crop_id_d1_c10\" #> [17] \"component_crop_id_d1_c9\"  \"component_crop_id_d1_c7\"  \"component_crop_id_d1_c8\"  \"component_crop_id_d3_c2\"  #> [21] \"component_crop_id_d2_c2\"  \"component_crop_id_d4_c1\"  \"planting_date_d1_c2\"      \"planting_date_d1_c1\"      #> [25] \"planting_date_d2_c1\"      \"planting_date_d1_c3\"      \"planting_date_d3_c1\"      \"planting_date_d1_c5\"      #> [29] \"planting_date_d1_c4\"      \"planting_date_d1_c6\"      \"planting_date_d1_c10\"     \"planting_date_d1_c9\"      #> [33] \"planting_date_d1_c7\"      \"planting_date_d1_c8\"      \"planting_date_d3_c2\"      \"planting_date_d2_c2\"      #> [37] \"planting_date_d4_c1\"      \"variety_id_d1_c2\"         \"variety_id_d1_c1\"         \"variety_id_d2_c1\"         #> [41] \"variety_id_d1_c3\"         \"variety_id_d3_c1\"         \"variety_id_d1_c5\"         \"variety_id_d1_c4\"         #> [45] \"variety_id_d1_c6\"         \"variety_id_d1_c10\"        \"variety_id_d1_c9\"         \"variety_id_d1_c7\"         #> [49] \"variety_id_d1_c8\"         \"variety_id_d3_c2\"         \"variety_id_d2_c2\"         \"variety_id_d4_c1\"         #> [53] \"planting_rate_d1_c2\"      \"planting_rate_d1_c1\"      \"planting_rate_d2_c1\"      \"planting_rate_d1_c3\"      #> [57] \"planting_rate_d3_c1\"      \"planting_rate_d1_c5\"      \"planting_rate_d1_c4\"      \"planting_rate_d1_c6\"      #> [61] \"planting_rate_d1_c10\"     \"planting_rate_d1_c9\"      \"planting_rate_d1_c7\"      \"planting_rate_d1_c8\"      #> [65] \"planting_rate_d3_c2\"      \"planting_rate_d2_c2\"      \"planting_rate_d4_c1\"      \"uid_d1_c2\"                #> [69] \"uid_d1_c1\"                \"uid_d2_c1\"                \"uid_d1_c3\"                \"uid_d3_c1\"                #> [73] \"uid_d1_c5\"                \"uid_d1_c4\"                \"uid_d1_c6\"                \"uid_d1_c10\"               #> [77] \"uid_d1_c9\"                \"uid_d1_c7\"                \"uid_d1_c8\"                \"uid_d3_c2\"                #> [81] \"uid_d2_c2\"                \"uid_d4_c1\"                \"planting_notes\"           \"planting_units\"           #> [85] \"material_planted\" #harvest_dates <- get_db_table(\"harvest_dates\")# can be a separate table or part of a list. h1 <- harmonize_harvest_dates(db$harvest_dates, crop_fractions_as_columns = FALSE) dim(h1) #> [1] 45299    26 names(h1) #>  [1] \"site_id\"            \"unit_id\"            \"expected_crop_id\"   \"actual_crop_id\"     \"stand_year\"         #>  [6] \"rotation_phase\"     \"phase_year_harvest\" \"harvest_year\"       \"harvested_fraction\" \"harvest_notes\"      #> [11] \"termination_date\"   \"termination_notes\"  \"harvest_date_1\"     \"harvest_date_2\"     \"harvest_date_3\"     #> [16] \"harvest_date_4\"     \"harvest_date_5\"     \"harvest_date_6\"     \"harvest_date_7\"     \"uid_1\"              #> [21] \"uid_2\"              \"uid_3\"              \"uid_4\"              \"uid_5\"              \"uid_6\"              #> [26] \"uid_7\"  h2 <- harmonize_harvest_dates(db$harvest_dates, crop_fractions_as_columns = TRUE) dim(h2) # only slightly different. #> [1] 45267    32 names(h2) #>  [1] \"site_id\"              \"unit_id\"              \"expected_crop_id\"     \"actual_crop_id\"       #>  [5] \"stand_year\"           \"rotation_phase\"       \"phase_year_harvest\"   \"harvest_year\"         #>  [9] \"harvest_notes\"        \"termination_date\"     \"termination_notes\"    \"harvest_date_1\"       #> [13] \"harvest_date_2\"       \"harvest_date_3\"       \"harvest_date_4\"       \"harvest_date_5\"       #> [17] \"harvest_date_6\"       \"harvest_date_7\"       \"harvested_fraction_1\" \"harvested_fraction_2\" #> [21] \"harvested_fraction_3\" \"harvested_fraction_4\" \"harvested_fraction_5\" \"harvested_fraction_6\" #> [25] \"harvested_fraction_7\" \"uid_1\"                \"uid_2\"                \"uid_3\"                #> [29] \"uid_4\"                \"uid_5\"                \"uid_6\"                \"uid_7\""},{"path":"https://drives-project.github.io/drivesR/articles/drivesR-data-use.html","id":"weather","dir":"Articles","previous_headings":"Harmonizing DRIVES tables","what":"6) Weather","title":"Workflow for using DRIVES database tables with drivesR","text":"DRIVES database contains two tables pertaining weather: weather_daily contains daily weather station data min max precipitation cumulative precipitation. Missing observations supplied gridded data Daymet. table organized long format, weather variables separate rows. weather_station_info provides information weather station identifiers used weather_daily data. includes lat-lon coordinates urls data access (applicable). harmonize_weather function converts daily weather table long wide removes columns useful wide format.","code":"#weather_daily <- get_db_table(\"weather_daily\")# can be a separate table or part of a list. str(db$weather_daily) # long version #> 'data.frame':    732322 obs. of  9 variables: #>  $ uid               : int  95329 95330 95331 95332 95333 95334 95335 95336 95337 95338 ... #>  $ site_id           : chr  \"CATCE\" \"CATCE\" \"CATCE\" \"CATCE\" ... #>  $ weather_station_id: chr  \"CATCE_ST2\" \"CATCE_ST2\" \"CATCE_ST2\" \"CATCE_ST2\" ... #>  $ year              : int  1978 1978 1978 1978 1978 1978 1978 1978 1978 1978 ... #>  $ date              : chr  \"1978-01-01\" \"1978-01-01\" \"1978-01-01\" \"1978-01-02\" ... #>  $ day_of_year       : int  1 1 1 2 2 2 3 3 3 4 ... #>  $ variable          : chr  \"air_temp_min_c\" \"air_temp_max_c\" \"precip_mm\" \"air_temp_min_c\" ... #>  $ value             : num  4.4 13.9 0 7.8 15 1.3 7.8 13.9 4.6 8.3 ... #>  $ flag              : chr  NA NA NA NA ... weatherdf <- harmonize_weather(db$weather_daily) str(weatherdf) # wide simplified version #> tibble [244,108 × 7] (S3: tbl_df/tbl/data.frame) #>  $ site_id       : chr [1:244108] \"CATCE\" \"CATCE\" \"CATCE\" \"CATCE\" ... #>  $ year          : int [1:244108] 1978 1978 1978 1978 1978 1978 1978 1978 1978 1978 ... #>  $ date          : chr [1:244108] \"1978-01-01\" \"1978-01-02\" \"1978-01-03\" \"1978-01-04\" ... #>  $ day_of_year   : int [1:244108] 1 2 3 4 5 6 7 8 9 10 ... #>  $ air_temp_min_c: num [1:244108] 4.4 7.8 7.8 8.3 10 9.4 5.6 10 11.7 10 ... #>  $ air_temp_max_c: num [1:244108] 13.9 15 13.9 11.7 12.8 13.3 15 13.9 14.4 16.1 ... #>  $ precip_mm     : num [1:244108] 0 1.3 4.6 4.3 29.7 23.1 0.3 1.3 24.9 4.3 ..."},{"path":"https://drives-project.github.io/drivesR/articles/drivesR-data-use.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"Harmonizing DRIVES tables","what":"5) Putting it all together","title":"Workflow for using DRIVES database tables with drivesR","text":"harmonize_yields_treatments function combines harmonization steps treatments, units, yields merges together. includes option keep crop fractions separate rows reorganize columns. can operate list pre-downloaded tables, fetch tables Directus. harmonize_yields_planting_harvest function combines harmonization steps yields, planting info, harvest dates. argument input list data tables, fetched Directus NULL. Details component crops multiple planting dates planting_info excluded. Multiple harvest dates included separate columns, harmonize_harvest_dates. Multiple fractions per crop included separate columns suffixes _f1, _f2, etc. harmonize_yields_planting_harvest_treatments function combines harmonization steps yields, planting info, harvest dates, experimental treatments create one giant data table. argument input list data tables, fetched Directus NULL. don’t mind losing details, can skip previous data download harmonization steps (excluding weather data) just use function. code fetches tables database puts together. can provide list previously downloaded database tables input.","code":"# db <- import_db_tables(c(\"treatment_id_info\",\"treatment_id_components\",\"experimental_unit_treatments\",\"crop_yields\"),fetch_option = \"download.only\") hyt <- harmonize_yields_treatments(db, crop_fractions_as_columns = TRUE)  #> Joining with `by = join_by(treatment_id)` #> Joining with `by = join_by(treatment_id)` names(hyt) #names will have numbered suffixes for crop fractions. #>  [1] \"site_id\"                       \"unit_id\"                       \"harvest_year\"                  #>  [4] \"actual_crop_id\"                \"stand_year\"                    \"num_harvests\"                  #>  [7] \"rotation_phase\"                \"uid_1\"                         \"uid_2\"                         #> [10] \"uid_3\"                         \"expected_crop_id_1\"            \"expected_crop_id_2\"            #> [13] \"expected_crop_id_3\"            \"measured_fraction_1\"           \"measured_fraction_2\"           #> [16] \"measured_fraction_3\"           \"removed_from_field_tf_1\"       \"removed_from_field_tf_2\"       #> [19] \"removed_from_field_tf_3\"       \"dry_yield_kg_ha_1\"             \"dry_yield_kg_ha_2\"             #> [22] \"dry_yield_kg_ha_3\"             \"yield_kg_ha_1\"                 \"yield_kg_ha_2\"                 #> [25] \"yield_kg_ha_3\"                 \"yield_percent_moisture_1\"      \"yield_percent_moisture_2\"      #> [28] \"yield_percent_moisture_3\"      \"moisture_type_1\"               \"moisture_type_2\"               #> [31] \"moisture_type_3\"               \"percent_moisture_at_harvest_1\" \"percent_moisture_at_harvest_2\" #> [34] \"percent_moisture_at_harvest_3\" \"data_processing_note_1\"        \"data_processing_note_2\"        #> [37] \"data_processing_note_3\"        \"cover_crop_1\"                  \"cover_crop_2\"                  #> [40] \"cover_crop_3\"                  \"treatmentID1\"                  \"treatmentID2\"                  #> [43] \"rotation_id\"                   \"entryPhase\"                    \"cover crop\"                    #> [46] \"fertilizer amendment class\"    \"irrigation\"                    \"N fertility\"                   #> [49] \"organic management\"            \"pest management\"               \"residue management\"            #> [52] \"tillage\"                       \"cropping system\"               \"nutrient management system\"    #> [55] \"N rate\"                        \"soil amendment\"                \"production system\"             #> [58] \"grassland management\"          \"grassland N addition\" dim(hyt) #> [1] 47021    59  hyt <- harmonize_yields_treatments(db, crop_fractions_as_columns = FALSE)   #> Joining with `by = join_by(treatment_id)` #> Joining with `by = join_by(treatment_id)` names(hyt)  #>  [1] \"uid\"                         \"site_id\"                     \"unit_id\"                     #>  [4] \"harvest_year\"                \"rotation_phase\"              \"stand_year\"                  #>  [7] \"num_harvests\"                \"expected_crop_id\"            \"actual_crop_id\"              #> [10] \"measured_fraction\"           \"removed_from_field_tf\"       \"dry_yield_kg_ha\"             #> [13] \"yield_kg_ha\"                 \"yield_percent_moisture\"      \"moisture_type\"               #> [16] \"percent_moisture_at_harvest\" \"data_processing_note\"        \"cover_crop\"                  #> [19] \"treatmentID1\"                \"treatmentID2\"                \"rotation_id\"                 #> [22] \"entryPhase\"                  \"cover crop\"                  \"fertilizer amendment class\"  #> [25] \"irrigation\"                  \"N fertility\"                 \"organic management\"          #> [28] \"pest management\"             \"residue management\"          \"tillage\"                     #> [31] \"cropping system\"             \"nutrient management system\"  \"N rate\"                      #> [34] \"soil amendment\"              \"production system\"           \"grassland management\"        #> [37] \"grassland N addition\" dim(hyt) #> [1] 65839    37 names(db) # full list including yield, planting, and harvest data.  #>  [1] \"crop_info\"                    \"crop_variety_info\"            \"crop_yields\"                  #>  [4] \"experimental_unit_info\"       \"experimental_unit_treatments\" \"harvest_dates\"                #>  [7] \"planting_info\"                \"rotation_id_info\"             \"rotation_phases\"              #> [10] \"site_info\"                    \"site_treatment_level_info\"    \"site_treatment_type_info\"     #> [13] \"treatment_id_components\"      \"treatment_id_info\"            \"weather_daily\"                #> [16] \"weather_station_info\" yph <- harmonize_yields_planting_harvest(db) dim(yph) #> [1] 47021    55 names(yph) #>  [1] \"site_id\"                        \"unit_id\"                        \"harvest_year\"                   #>  [4] \"expected_crop_id\"               \"actual_crop_id\"                 \"stand_year\"                     #>  [7] \"num_harvests\"                   \"rotation_phase\"                 \"cover_crop\"                     #> [10] \"crop_yields_uid_f1\"             \"crop_yields_uid_f2\"             \"crop_yields_uid_f3\"             #> [13] \"measured_fraction_f1\"           \"measured_fraction_f2\"           \"measured_fraction_f3\"           #> [16] \"removed_from_field_tf_f1\"       \"removed_from_field_tf_f2\"       \"removed_from_field_tf_f3\"       #> [19] \"dry_yield_kg_ha_f1\"             \"dry_yield_kg_ha_f2\"             \"dry_yield_kg_ha_f3\"             #> [22] \"yield_kg_ha_f1\"                 \"yield_kg_ha_f2\"                 \"yield_kg_ha_f3\"                 #> [25] \"yield_percent_moisture_f1\"      \"yield_percent_moisture_f2\"      \"yield_percent_moisture_f3\"      #> [28] \"moisture_type_f1\"               \"moisture_type_f2\"               \"moisture_type_f3\"               #> [31] \"percent_moisture_at_harvest_f1\" \"percent_moisture_at_harvest_f2\" \"data_processing_note_f1\"        #> [34] \"data_processing_note_f2\"        \"data_processing_note_f3\"        \"phase_year_harvest_f1\"          #> [37] \"phase_year_harvest_f2\"          \"harvest_notes_f1\"               \"harvest_notes_f2\"               #> [40] \"harvest_date_1_f1\"              \"harvest_date_1_f2\"              \"harvest_dates_uid_1_f1\"         #> [43] \"harvest_dates_uid_1_f2\"         \"planting_info_uid\"              \"phase_year_planting\"            #> [46] \"planting_year\"                  \"planting_date\"                  \"variety_id\"                     #> [49] \"planting_rate\"                  \"planting_units\"                 \"material_planted\"               #> [52] \"planting_notes\"                 \"date_index\"                     \"replantedTF\"                    #> [55] \"num_components\" monsterdf <- harmonize_yields_planting_harvest_treatments(db) #> Joining with `by = join_by(treatment_id)` #> Joining with `by = join_by(treatment_id)` dim(monsterdf) #> [1] 47021    74 names(monsterdf) #>  [1] \"site_id\"                        \"unit_id\"                        \"year\"                           #>  [4] \"treatmentID1\"                   \"treatmentID2\"                   \"rotation_id\"                    #>  [7] \"entryPhase\"                     \"cover crop\"                     \"fertilizer amendment class\"     #> [10] \"irrigation\"                     \"N fertility\"                    \"organic management\"             #> [13] \"pest management\"                \"residue management\"             \"tillage\"                        #> [16] \"cropping system\"                \"nutrient management system\"     \"N rate\"                         #> [19] \"soil amendment\"                 \"production system\"              \"grassland management\"           #> [22] \"grassland N addition\"           \"expected_crop_id\"               \"actual_crop_id\"                 #> [25] \"stand_year\"                     \"num_harvests\"                   \"rotation_phase\"                 #> [28] \"cover_crop\"                     \"crop_yields_uid_f1\"             \"crop_yields_uid_f2\"             #> [31] \"crop_yields_uid_f3\"             \"measured_fraction_f1\"           \"measured_fraction_f2\"           #> [34] \"measured_fraction_f3\"           \"removed_from_field_tf_f1\"       \"removed_from_field_tf_f2\"       #> [37] \"removed_from_field_tf_f3\"       \"dry_yield_kg_ha_f1\"             \"dry_yield_kg_ha_f2\"             #> [40] \"dry_yield_kg_ha_f3\"             \"yield_kg_ha_f1\"                 \"yield_kg_ha_f2\"                 #> [43] \"yield_kg_ha_f3\"                 \"yield_percent_moisture_f1\"      \"yield_percent_moisture_f2\"      #> [46] \"yield_percent_moisture_f3\"      \"moisture_type_f1\"               \"moisture_type_f2\"               #> [49] \"moisture_type_f3\"               \"percent_moisture_at_harvest_f1\" \"percent_moisture_at_harvest_f2\" #> [52] \"data_processing_note_f1\"        \"data_processing_note_f2\"        \"data_processing_note_f3\"        #> [55] \"phase_year_harvest_f1\"          \"phase_year_harvest_f2\"          \"harvest_notes_f1\"               #> [58] \"harvest_notes_f2\"               \"harvest_date_1_f1\"              \"harvest_date_1_f2\"              #> [61] \"harvest_dates_uid_1_f1\"         \"harvest_dates_uid_1_f2\"         \"planting_info_uid\"              #> [64] \"phase_year_planting\"            \"planting_year\"                  \"planting_date\"                  #> [67] \"variety_id\"                     \"planting_rate\"                  \"planting_units\"                 #> [70] \"material_planted\"               \"planting_notes\"                 \"date_index\"                     #> [73] \"replantedTF\"                    \"num_components\""},{"path":"https://drives-project.github.io/drivesR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Katherine Muller. Author, maintainer.","code":""},{"path":"https://drives-project.github.io/drivesR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Muller K (2025). drivesR: DRIVES Database Workflow. R package version 0.1.0, https://drives-project.github.io/drivesR/.","code":"@Manual{,   title = {drivesR: DRIVES Database Workflow},   author = {Katherine Muller},   year = {2025},   note = {R package version 0.1.0},   url = {https://drives-project.github.io/drivesR/}, }"},{"path":"https://drives-project.github.io/drivesR/index.html","id":"drivesr","dir":"","previous_headings":"","what":"DRIVES Database Workflow","title":"DRIVES Database Workflow","text":"goal drivesR facilitate data management analysis members Diverse Rotations Improve Valuable Ecosystems Services (DRIVES) Project anyone interested using publicly-available portions DRIVES database. DRIVES database contains yield weather data 21 long-term agricultural field experiments crop rotation component. can find research participating sites website, drives-network.org/. Metadata full data inventory can found DRIVES database repository Ag Data Commons: https://hdl.handle.net/10779/USDA.ADC.28654694. May 2025, access DRIVES database requires API key. Project members collaborators can request API key DRIVES data manager. users must complete data use survey agree data use terms. Outside users read access subset data excluding sites site years embargoed public access.","code":""},{"path":"https://drives-project.github.io/drivesR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"DRIVES Database Workflow","text":"can install development version drivesR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"DRIVES-Project/drivesR\")"},{"path":"https://drives-project.github.io/drivesR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"DRIVES Database Workflow","text":"vignette provides detailed instructions examples accessing harmonizing DRIVES data tables.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/C_to_F.html","id":null,"dir":"Reference","previous_headings":"","what":"Celsus to Fahrenheit conversion — C_to_F","title":"Celsus to Fahrenheit conversion — C_to_F","text":"Convert degrees Celsius degrees Fahrenheit","code":""},{"path":"https://drives-project.github.io/drivesR/reference/C_to_F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Celsus to Fahrenheit conversion — C_to_F","text":"","code":"C_to_F(C_temp)"},{"path":"https://drives-project.github.io/drivesR/reference/C_to_F.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Celsus to Fahrenheit conversion — C_to_F","text":"C_temp temperature degrees Celsius","code":""},{"path":"https://drives-project.github.io/drivesR/reference/C_to_F.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Celsus to Fahrenheit conversion — C_to_F","text":"temperature degrees Fahrenheit","code":""},{"path":"https://drives-project.github.io/drivesR/reference/C_to_F.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Celsus to Fahrenheit conversion — C_to_F","text":"","code":"temp1 <- C_to_F(22); temp2 <- C_to_F( c(-2, 12, 23));"},{"path":"https://drives-project.github.io/drivesR/reference/F_to_C.html","id":null,"dir":"Reference","previous_headings":"","what":"Fahrenheit to Celsius conversion — F_to_C","title":"Fahrenheit to Celsius conversion — F_to_C","text":"Convert degrees Fahrenheit degrees Celsius","code":""},{"path":"https://drives-project.github.io/drivesR/reference/F_to_C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fahrenheit to Celsius conversion — F_to_C","text":"","code":"F_to_C(F_temp)"},{"path":"https://drives-project.github.io/drivesR/reference/F_to_C.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fahrenheit to Celsius conversion — F_to_C","text":"F_temp temperature degrees Farenheit","code":""},{"path":"https://drives-project.github.io/drivesR/reference/F_to_C.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fahrenheit to Celsius conversion — F_to_C","text":"temperature degrees Celsius","code":""},{"path":"https://drives-project.github.io/drivesR/reference/F_to_C.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fahrenheit to Celsius conversion — F_to_C","text":"","code":"temp1 <- F_to_C(50); temp2 <- F_to_C(c(50,63,23))"},{"path":"https://drives-project.github.io/drivesR/reference/acre_to_hectare.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert area from Acres to hectares — acre_to_hectare","title":"Convert area from Acres to hectares — acre_to_hectare","text":"Convert area Acres hectares","code":""},{"path":"https://drives-project.github.io/drivesR/reference/acre_to_hectare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert area from Acres to hectares — acre_to_hectare","text":"","code":"acre_to_hectare(acres)"},{"path":"https://drives-project.github.io/drivesR/reference/acre_to_hectare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert area from Acres to hectares — acre_to_hectare","text":"acres value numeric vector area acres","code":""},{"path":"https://drives-project.github.io/drivesR/reference/acre_to_hectare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert area from Acres to hectares — acre_to_hectare","text":"value numeric vector area hectares","code":""},{"path":"https://drives-project.github.io/drivesR/reference/api_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Send a request to the Directus API https://docs.directus.io/ https://directus.io/docs/api — api_request","title":"Send a request to the Directus API https://docs.directus.io/ https://directus.io/docs/api — api_request","text":"Send request Directus API https://docs.directus.io/ https://directus.io/docs/api","code":""},{"path":"https://drives-project.github.io/drivesR/reference/api_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send a request to the Directus API https://docs.directus.io/ https://directus.io/docs/api — api_request","text":"","code":"api_request(   myverb = \"POST\",   mytarget = \"collections\",   jsonbody = NULL,   myurl = getOption(\"drivesR.default.url\"),   mytoken = getOption(\"drivesR.default.directustoken\") )"},{"path":"https://drives-project.github.io/drivesR/reference/api_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send a request to the Directus API https://docs.directus.io/ https://directus.io/docs/api — api_request","text":"myverb Verb http::VERB function. Typically POST, PATCH, SEARCH, GET, DELETE mytarget part URL string pointing content want read modify. jsonbody JSON object containing content request, applicable. POST PATCH, content want modify. SEARCH, content kind filter query. argument typically NULL DELTE GET requests. myurl Root URL DRIVES database. Set default package loads (\"https://data.drives-network.org/) mytoken API token user. formatted \"Bearer APItoken\" (without curly brackets). recommended user make script loads API token database URL.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/api_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send a request to the Directus API https://docs.directus.io/ https://directus.io/docs/api — api_request","text":"POST, PATCH, DELETE requests modify content Directus return status message (https://directus.io/docs/guides/connect/errors) Usually, 200 means request successful anything else means request failed. kinds requests can saved R object run interactive code. methods Requests retrieve content database (GET, SEARCH) must passed httr::content downstream functions used organize content.","code":""},{"path":[]},{"path":"https://drives-project.github.io/drivesR/reference/api_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send a request to the Directus API https://docs.directus.io/ https://directus.io/docs/api — api_request","text":"","code":"# Accessing database content (here, it is information about collections) # not run: collectionsreq <- api_request(\"GET\", mytarget = \"collections\") # not run: collectionjson <- jsonlite::toJSON(httr::content(collectionsreq), # pretty=TRUE, auto_unbox = TRUE)   # Modifying database content (here it is adding a new collection) #not run: testcollection <- make_collection_json() # default with sample data dictionary  # not run: new_collection_req <- api_request(\"POST\", \"collections\", # testcollection)"},{"path":"https://drives-project.github.io/drivesR/reference/check_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Check category dictionary — check_categories","title":"Check category dictionary — check_categories","text":"Checks discrepancies category dictionary column dictionary input data.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check category dictionary — check_categories","text":"","code":"check_categories(   table_name = \"site_info\",   inputdf = NULL,   mytoken = getOption(\"drivesR.default.directustoken\") )"},{"path":"https://drives-project.github.io/drivesR/reference/check_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check category dictionary — check_categories","text":"table_name table (collection) identifier inputdf data frame prospective rows added table. NULL, function checks category column dictionaries. mytoken API token, formatted \"Bearer apitoken\".","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check category dictionary — check_categories","text":"inputdf = NULL, returns data frame describing conditions outcomes corresponding particular tables fields. inputdf provided, returns list dataframe conditions (checkdf) list categorical values input data missing category dictionary. list can used ammend category dictionary.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_categories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check category dictionary — check_categories","text":"First function tests set preliminary conditions. Failure throws error message. 1) table name present column dictionary 2) column dictionary table contains category fields. 3) table name present category dictionary. conditions met, function checks correspondence category dictionary column dictionary. conditions : 1) column_name values category_dictionary specified categories column_dictionary. 2) fields missing category_dictionary input table provided inputdf argument, function checks contents table match category dictionary. two conditions : 1) category columns missing inputdf. 2) category levels inputdf present category_dictionary.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check category dictionary — check_categories","text":"","code":"#Not run: check_categories(\"site_info\")"},{"path":"https://drives-project.github.io/drivesR/reference/check_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check column names for a staged table. — check_column_names","title":"Check column names for a staged table. — check_column_names","text":"Quality control step check column names data frame imported Directus match table schema.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check column names for a staged table. — check_column_names","text":"","code":"check_column_names(   table_name = \"site_info\",   inputdf = NULL,   mytoken = getOption(\"drivesR.default.directustoken\") )"},{"path":"https://drives-project.github.io/drivesR/reference/check_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check column names for a staged table. — check_column_names","text":"table_name Table identifier, \"site_info\" inputdf Dataframe evaluated. mytoken directus API token, \"Bearer apitoken\"","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check column names for a staged table. — check_column_names","text":"dataframe checks, outcomes, relevant fields.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_column_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check column names for a staged table. — check_column_names","text":"","code":"#Not run: check_column_names(\"site_info\", mydf)"},{"path":"https://drives-project.github.io/drivesR/reference/check_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Check dictionary metadata for a database table. — check_dictionary","title":"Check dictionary metadata for a database table. — check_dictionary","text":"Check discrepancies collection metadata stored Directus  data dictionaries specified table. Conditions tested :  1) table_name present column_dictionary.  2) number columns matches table schema column_dictionary.  3) Column names match table schema column_dictionary.  4) Column names order, specified column_order field column_dictionary.  5) Data constraints coded column_dictionary match table schema.  constraints :  - data type  - primary key  - unique  - nullable  - autoincremented  - foreign key tables fields.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check dictionary metadata for a database table. — check_dictionary","text":"","code":"check_dictionary(   table_name = \"site_info\",   mytoken = getOption(\"drivesR.default.directustoken\") )"},{"path":"https://drives-project.github.io/drivesR/reference/check_dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check dictionary metadata for a database table. — check_dictionary","text":"table_name Table (collection) name. mytoken API token, formatted \"Bearer apitoken\"","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check dictionary metadata for a database table. — check_dictionary","text":"data frame set conditions, outcome (TRUE = pass FALSE = fails), fields fail condition. case mismatched field names, separate columns fields column_dictionary (dcols) Directus table schema (tcols).","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check dictionary metadata for a database table. — check_dictionary","text":"","code":"# set mytoken in function or with set_default_token() # Not run:  site_info_check <- check_dictionary(table_name = \"site_info\")"},{"path":"https://drives-project.github.io/drivesR/reference/check_dups.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a dataframe for rows that are duplicated across a set of columns. — check_dups","title":"Subset a dataframe for rows that are duplicated across a set of columns. — check_dups","text":"Subset dataframe rows duplicated across set columns.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_dups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a dataframe for rows that are duplicated across a set of columns. — check_dups","text":"","code":"check_dups(mydf, checkcols = NULL, dupvec = NULL, dupTFmatchesInput = TRUE)"},{"path":"https://drives-project.github.io/drivesR/reference/check_dups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a dataframe for rows that are duplicated across a set of columns. — check_dups","text":"mydf dataframe. checkcols vector column names want check duplicates. also work column indices. Alternative dupvec. dupvec vector use check duplicate values. Length(dupvec) = nrow(mydf). Alternative column names. dupTFmatchesInput TRUE, TRUE/FALSE vector indicating duplicated values corresponds input dataframe. FALSE, corresponds subsetted dataframe containing duplicate values. values","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_dups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a dataframe for rows that are duplicated across a set of columns. — check_dups","text":"Returns list containing number unique column combinations duplicate values (ndups), subsetted dataframe containing duplicated values, TRUE FALSE vector facilitate removal duplicate rows (created duplicated). vector can correspond input dataframe (mydf) output dataframe (dupdf), depending choice dupTFmatchesInput.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_dups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a dataframe for rows that are duplicated across a set of columns. — check_dups","text":"","code":"testdf <- data.frame(\"col1\" = c(\"spam\",\"eggs\",\"spam\",\"spam\"),                      \"col2\" = c(1,2,1,1),                      \"col3\" = c(\"cat\",\"fish\",\"dog\",\"cat\"),                      \"col4\" = c(1,2,3,4)) check_dups(testdf, checkcols = c(\"col1\",\"col2\")) #> $ndups #> [1] 1 #>  #> $dupdf #>   col1 col2 col3 col4 #> 1 spam    1  cat    1 #> 3 spam    1  dog    3 #> 4 spam    1  cat    4 #>  #> $dupTF #> [1] FALSE FALSE  TRUE  TRUE #>  check_dups(testdf, checkcols = c(1,2,3)) #> $ndups #> [1] 1 #>  #> $dupdf #>   col1 col2 col3 col4 #> 1 spam    1  cat    1 #> 4 spam    1  cat    4 #>  #> $dupTF #> [1] FALSE FALSE FALSE  TRUE #>"},{"path":"https://drives-project.github.io/drivesR/reference/check_fk_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Check foreign key values for a staged table. — check_fk_values","title":"Check foreign key values for a staged table. — check_fk_values","text":"Check foreign key values staged table.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_fk_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check foreign key values for a staged table. — check_fk_values","text":"","code":"check_fk_values(   table_name = NULL,   inputdf = NULL,   mytoken = getOption(\"drivesR.default.directustoken\"),   myurl = getOption(\"drivesR.default.url\") )"},{"path":"https://drives-project.github.io/drivesR/reference/check_fk_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check foreign key values for a staged table. — check_fk_values","text":"table_name Name table DRIVES database. inputdf Data frame containing foreign key colulmns. mytoken Directus token. myurl Directus base url.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_fk_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check foreign key values for a staged table. — check_fk_values","text":"list columns foreign key constraints dataframe subsetted rows inputdf violate foreign key constraints–NULL rows pass. function throws messages results foreign key columns.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_fk_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check foreign key values for a staged table. — check_fk_values","text":"","code":"# not run: fkcheck <- check_fk_values( #\"crop_variety_info\", inputdf = staged_df)"},{"path":"https://drives-project.github.io/drivesR/reference/check_table_contents.html","id":null,"dir":"Reference","previous_headings":"","what":"Check table contents before import — check_table_contents","title":"Check table contents before import — check_table_contents","text":"function checks contents table (usually imported CSV) possible failures validation constraints. constraints checked : 1) is_nullable 2) max_length (applicable) 3) is_unique 4) data type. Column names foreign key values checked different functions.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_table_contents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check table contents before import — check_table_contents","text":"","code":"check_table_contents(table_name = NULL, inputdf = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/check_table_contents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check table contents before import — check_table_contents","text":"table_name Name table Directus inputdf data frame intended Directus table","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_table_contents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check table contents before import — check_table_contents","text":"nested data frame (tibble) results constraint. constraint pass, problem_list column contains named list row indices break constraint e.g., list(\"column1\" = c(1,2,3), \"column2\" = c(3,4,5)) dtype_problem_list column contains list data types columns pass constraint. e.g., list(\"column1\" = \"boolean\", \"column2\" = \"date\") 1) is_nullable 2) max_length 3) is_unique 4) data type.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_table_contents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check table contents before import — check_table_contents","text":"","code":"#not run: mydf <- read.csv(\"site_info_to_add.csv\") #not run: checkdf <-  check_table_contents(\"site_info\", inputdf = mydf)"},{"path":"https://drives-project.github.io/drivesR/reference/check_treatment_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for mistakes in treatment components and years. — check_treatment_years","title":"Check for mistakes in treatment components and years. — check_treatment_years","text":"Harmonization steps require : 1) Expanding start end years experimental_unit_treatments results single row per treatment_id per unit_id per year (one treatmentID1, one treatmentID2) 2) Expanding start end years treatment_id_components results 1 level per treatment type treatment id per year. 3) expanded tables combined, 1 level per treatment type, unit id, treatment id, year.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_treatment_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for mistakes in treatment components and years. — check_treatment_years","text":"","code":"check_treatment_years(db = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/check_treatment_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for mistakes in treatment components and years. — check_treatment_years","text":"db list containing named data frames treatment_id_info, treatment_id_components, experimental_unit_treatments. function intended check mistakes uploading database, list must supplied user.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_treatment_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for mistakes in treatment components and years. — check_treatment_years","text":"list subsetted problem rows experimental_unit_treatments, treatment_id_components, combined dataframe treatment components experimental unit.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/check_treatment_years.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for mistakes in treatment components and years. — check_treatment_years","text":"","code":"# not run trt_check <- check_treatment_years(db)"},{"path":"https://drives-project.github.io/drivesR/reference/date_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Date formats — date_formats","title":"Date formats — date_formats","text":"list possible date formats.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/date_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date formats — date_formats","text":"","code":"date_formats"},{"path":"https://drives-project.github.io/drivesR/reference/date_formats.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Date formats — date_formats","text":"list vectors mdy Vector month-day-year formats yyyymd Vector year-month-day formats bmo Vector letter word months dmy Vector day-month-year formats unlikely Vector unlikely date formats","code":""},{"path":"https://drives-project.github.io/drivesR/reference/delete_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete rows in a table based on their primary key value — delete_rows","title":"Delete rows in a table based on their primary key value — delete_rows","text":"Delete rows table based primary key value","code":""},{"path":"https://drives-project.github.io/drivesR/reference/delete_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete rows in a table based on their primary key value — delete_rows","text":"","code":"delete_rows(   table_name = NULL,   pkvec = NULL,   check_only = TRUE,   pkfield = \"uid\" )"},{"path":"https://drives-project.github.io/drivesR/reference/delete_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete rows in a table based on their primary key value — delete_rows","text":"table_name table identifier directus pkvec vector primary keys rows want delete table. check_only TRUE FALSE indicating whether want inspect rows instead deleting . default TRUE protective measure. pkfield Name primary key column. default \"uid.\"","code":""},{"path":"https://drives-project.github.io/drivesR/reference/delete_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete rows in a table based on their primary key value — delete_rows","text":"check_only = TRUE, returns data frame table subset corresponding primary keys pkvec. check_only = FALSE, function performs delete operations primary keys within specified table.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/delete_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete rows in a table based on their primary key value — delete_rows","text":"","code":"# not run: fakerowjson <- make_insert_json(data.frame(\"site_id\" = c(\"fake_id1\",\"fake_id2\"))) # not run: api_request(\"POST\",\"items/site_info\", fakerowjson) # not run: testrun <- delete_rows(\"site_info\",c(\"fake_id1\",\"fake_id2\"), check_only = TRUE) # not run: delete_rows(\"site_info\",c(\"fake_id1\",\"fake_id2\"), check_only = FALSE)"},{"path":"https://drives-project.github.io/drivesR/reference/drivesR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"drivesR: DRIVES Database Workflow — drivesR-package","title":"drivesR: DRIVES Database Workflow — drivesR-package","text":"Contains various functions access harmonize data DRIVES database. Also contains functions used prepare data, perform quality checks, manage database structure.","code":""},{"path":[]},{"path":"https://drives-project.github.io/drivesR/reference/expand_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand data frame by start and end years — expand_years","title":"Expand data frame by start and end years — expand_years","text":"Converts table time ranges specified start- end-year column longer table separate rows year.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/expand_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand data frame by start and end years — expand_years","text":"","code":"expand_years(   mydf = NULL,   na_end_year = 2021,   sycol = \"start_year\",   eycol = \"end_year\",   ycol = \"year\" )"},{"path":"https://drives-project.github.io/drivesR/reference/expand_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand data frame by start and end years — expand_years","text":"mydf data frame containing start- end-year columns na_end_year year use end-year NA. Start years must NAs. sycol Name start-year column. Default start_year. eycol Name end-year column. Default end_year. ycol Name new column individual years. Default year.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/expand_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand data frame by start and end years — expand_years","text":"data-frame separate rows year start end year. Start end year columns removed.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/expand_years.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand data frame by start and end years — expand_years","text":"","code":"#Not run: exp_unit_trt <- get_db_table(\"experimental_units_treatments\")  #Not run: exp_trt_yearly <- expand_years(exp_unit_trt)"},{"path":"https://drives-project.github.io/drivesR/reference/ft_to_m.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert length from feet to meters — ft_to_m","title":"Convert length from feet to meters — ft_to_m","text":"Convert length feet meters","code":""},{"path":"https://drives-project.github.io/drivesR/reference/ft_to_m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert length from feet to meters — ft_to_m","text":"","code":"ft_to_m(ft_len)"},{"path":"https://drives-project.github.io/drivesR/reference/ft_to_m.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert length from feet to meters — ft_to_m","text":"ft_len Length feet","code":""},{"path":"https://drives-project.github.io/drivesR/reference/ft_to_m.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert length from feet to meters — ft_to_m","text":"Length meters","code":""},{"path":"https://drives-project.github.io/drivesR/reference/ft_to_m.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert length from feet to meters — ft_to_m","text":"","code":"ft_to_m(8); #> [1] 2.4384 ft_to_m(c(8,9,10)) #> [1] 2.4384 2.7432 3.0480"},{"path":"https://drives-project.github.io/drivesR/reference/get_canadian_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Canadian data from the Borealis Repository This function is called by get_db_table if the public option is set to TRUE. — get_canadian_data","title":"Get Canadian data from the Borealis Repository This function is called by get_db_table if the public option is set to TRUE. — get_canadian_data","text":"Get Canadian data Borealis Repository function called get_db_table public option set TRUE.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_canadian_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Canadian data from the Borealis Repository This function is called by get_db_table if the public option is set to TRUE. — get_canadian_data","text":"","code":"get_canadian_data(   table_name = NULL,   dataverse_url = \"https://borealisdata.ca\",   dataverse_doi = \"doi:10.5683/SP3/QGLCKO\",   dataverse_api = getOption(\"drivesR.default.dataversetoken\"),   borealis_repo_info = NULL,   directus_url = getOption(\"drivesR.default.url\") )"},{"path":"https://drives-project.github.io/drivesR/reference/get_canadian_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Canadian data from the Borealis Repository This function is called by get_db_table if the public option is set to TRUE. — get_canadian_data","text":"table_name Name drives database table, shown table_dictionary. dataverse_url Server URL Borealis repository, part Dataverse. default set \"https://borealisdata.ca\" dataverse_doi Persistent identifier collection Borealis. set default. dataverse_api API key Borealis repository. option included troubleshooting repository data tables published. published, option can remain NULL. borealis_repo_info dataframe containing Borealis file identifiers table_name. NULL, information imported Directus. Set set_default_token(). directus_url URL Directus database (can set global options).","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_canadian_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Canadian data from the Borealis Repository This function is called by get_db_table if the public option is set to TRUE. — get_canadian_data","text":"dataframe rows two Canadian sites specified table_name. can combined public Direcctus table using bind_rows.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_column_dict_for_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get column dictionary for a specified table As an alternative to subsetting. — get_column_dict_for_table","title":"Get column dictionary for a specified table As an alternative to subsetting. — get_column_dict_for_table","text":"Get column dictionary specified table alternative subsetting.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_column_dict_for_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get column dictionary for a specified table As an alternative to subsetting. — get_column_dict_for_table","text":"","code":"get_column_dict_for_table(   table_name = \"site_info\",   myurl = getOption(\"drivesR.default.url\") )"},{"path":"https://drives-project.github.io/drivesR/reference/get_column_dict_for_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get column dictionary for a specified table As an alternative to subsetting. — get_column_dict_for_table","text":"table_name  myurl Base url Directus database.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_db_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch schema information from directus — get_db_info","title":"Fetch schema information from directus — get_db_info","text":"Fetch schema information directus","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_db_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch schema information from directus — get_db_info","text":"","code":"get_db_info(   mytarget = \"collections\",   output_format = c(\"data.frame\", \"json\")[1],   myurl = getOption(\"drivesR.default.url\"),   mytoken = getOption(\"drivesR.default.directustoken\"),   flatten = FALSE )"},{"path":"https://drives-project.github.io/drivesR/reference/get_db_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch schema information from directus — get_db_info","text":"mytarget part URL indicating part database want schema information . \"collections\" returns information tables. \"collections/table_name\" returns metadata specific collection. information columns within table, use \"fields/table_name\". information relations table, use \"relations/table_name/column_name output_format default, output formatted data frame. also option format prettified json string. myurl Base URL drives database. mytoken User-specific Directus API token, format \"Bearer myAPItoken\" without curly brackets. flatten FALSE (default), data dataframe nested. TRUE, flattened. Irrelevant output json.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_db_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch schema information from directus — get_db_info","text":"dataframe (default) json string schema metadata information pulled directus","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_db_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch schema information from directus — get_db_info","text":"","code":"# collection_info <- get_db_info(\"collections\") # site_field_info <- get_db_info(\"fields/site_info\") # foreign_key_info <- get_db_info(\"relations\")"},{"path":"https://drives-project.github.io/drivesR/reference/get_db_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch an entire table from Directus — get_db_table","title":"Fetch an entire table from Directus — get_db_table","text":"Fetch entire table Directus","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_db_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch an entire table from Directus — get_db_table","text":"","code":"get_db_table(   table_name = \"site_info\",   public = getOption(\"drivesR.default.public\"),   myurl = getOption(\"drivesR.default.url\"),   mytoken = getOption(\"drivesR.default.directustoken\"),   public_tables = getOption(\"drivesR.default.tablevec\"),   borealis_repo_info = NULL )"},{"path":"https://drives-project.github.io/drivesR/reference/get_db_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch an entire table from Directus — get_db_table","text":"table_name table identifier within Directus public TRUE FALSE indicating whether table read public internal portions DRIVES database. can set global option. myurl database url. default, \"https://data.drives-network.org\" mytoken user-specific API token, format \"Bearer insertAPItoken\", without curly brackets. can set set_default_token. public_tables Vector table names receive prefix 'public_' public = TRUE. borealis_repo_info dataframe containing Borealis file identifiers table_name. NULL, information imported Directus.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_db_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch an entire table from Directus — get_db_table","text":"data frame containing rows columns specified table. public set TRUE, data exclude sites years approved public access. Also, data Canadian sites fetched Canadian-hosted repository (Borealis).","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_db_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch an entire table from Directus — get_db_table","text":"","code":"#not run: testdf <- get_db_table(\"site_info\") # at once #not run: testdf2 <- get_db_table(\"site_info\", in_batches = TRUE, batchsize = 4)"},{"path":"https://drives-project.github.io/drivesR/reference/get_table_from_req.html","id":null,"dir":"Reference","previous_headings":"","what":"Download content from an API fetch request into a data frame — get_table_from_req","title":"Download content from an API fetch request into a data frame — get_table_from_req","text":"useful api_request() involves json_body object, filtering conditions table.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_table_from_req.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download content from an API fetch request into a data frame — get_table_from_req","text":"","code":"get_table_from_req(apirequest = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/get_table_from_req.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download content from an API fetch request into a data frame — get_table_from_req","text":"apirequest API request made httr api_request() GET SEARCH.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/get_table_from_req.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download content from an API fetch request into a data frame — get_table_from_req","text":"data-frame contents API request.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_harvest_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize harvest dates — harmonize_harvest_dates","title":"Harmonize harvest dates — harmonize_harvest_dates","text":"light processing harvest_dates table.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_harvest_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize harvest dates — harmonize_harvest_dates","text":"","code":"harmonize_harvest_dates(   harvest_dates = NULL,   crop_fractions_as_columns = FALSE,   primary_crop_fractions = getOption(\"drivesR.primary_crop_fractions\") )"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_harvest_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize harvest dates — harmonize_harvest_dates","text":"harvest_dates data frame harvest_dates table DRIVES database. NULL, table downloaded Directus. crop_fractions_as_columns TRUE, multiple fractions crop organized separate columns. FALSE, multiple fractions crop organized separate rows, database table. Although multiple crop fractions rare, option helps merge yield data. primary_crop_fractions vector crop fractions select primary fraction, one. far, pertains grain tomato fruit. default set option drivesR.primary_crop_fractions.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_harvest_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize harvest dates — harmonize_harvest_dates","text":"data frame harvest date data minor changes one row per unit/year/crop. Multiple harvests separated columns. Multiple","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_harvest_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize harvest dates — harmonize_harvest_dates","text":"","code":"# not run: harv1 <- harmonize_harvest_dates(crop_fractions_as_columns = TRUE) # not run: harv2 <- harmonize_harvest_dates(crop_fractions_as_columns = FALSE)"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_planting_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize planting info Reshapes the planting info table based on specifications set by the user. To aid in merging with yield data. — harmonize_planting_info","title":"Harmonize planting info Reshapes the planting info table based on specifications set by the user. To aid in merging with yield data. — harmonize_planting_info","text":"Harmonize planting info Reshapes planting info table based specifications set user. aid merging yield data.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_planting_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize planting info Reshapes the planting info table based on specifications set by the user. To aid in merging with yield data. — harmonize_planting_info","text":"","code":"harmonize_planting_info(   planting_info = NULL,   replant_dates = c(\"latest\", \"rows\", \"columns\")[1],   include_component_crops = TRUE )"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_planting_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize planting info Reshapes the planting info table based on specifications set by the user. To aid in merging with yield data. — harmonize_planting_info","text":"planting_info data frame planting_info table DRIVES database. NULL, downloaded Directus database. replant_dates Indicates multiple planting dates organized output. three options: latest, rows, columns. \"latest\" means output dataframe exclude earlier dates replanted plots, assuming unsuccessful. \"rows\" means output dataframe include organize multiple planting dates separate rows. \"columns\" means output dataframe organize multiple planting dates separate columns. include_component_crops TRUE FALSE indicating whether output include information components crop mixtures (component_crop_id). TRUE, output dataframe include component crop information separate columns.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_planting_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize planting info Reshapes the planting info table based on specifications set by the user. To aid in merging with yield data. — harmonize_planting_info","text":"dataframe planting information arranged either: 1) one row per unit_id/harvest_year/actual_crop_id (replant_dates \"latest\" \"columns\") 2) one row per unit_id/harvest_year/actual_crop_id/planting_date (replant_dates \"rows\") include_component_crops TRUE, output columns include suffixes \"_1\", \"_2\", etc. multiple components, based component_crop_index column. replant_dates also set \"columns\", output columns include suffixes \"_d1_c1\",\"d1_c2\",\"_d2_c1\",\"_d2_c2, etc. multiple components within date. include_component_crops FALSE, output include additional integer column, num_component_crops indicating number component crops planted date. consider component crops planted earlier planting dates. Also, output keeps variety_id planting_rate information dates one component. replant_dates set \"latest\", output include added logical column, replantedTF indicating whether plot replanted. value date_index indicates many times plot replanted.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_planting_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize planting info Reshapes the planting info table based on specifications set by the user. To aid in merging with yield data. — harmonize_planting_info","text":"","code":"# latestWithComponents <- harmonize_plantinfo(replant_dates = \"latest\", include_component_crops = TRUE) # latestWithoutComponents <- harmonize_plantinfo(replant_dates = \"latest\", include_component_crops = FALSE) # rowsWithComponents <- harmonize_plantinfo(replant_dates = \"rows\", include_component_crops = TRUE) # rowsWithoutComponents <- harmonize_plantinfo(replant_dates = \"rows\", include_component_crops = FALSE) # columnsWithComponents <- harmonize_plantinfo(replant_dates = \"columns\", include_component_crops = TRUE)  # columnsWithoutComponents <- harmonize_plantinfo(replant_dates = \"columns\", include_component_crops = FALSE"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_treatments.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize treatment components — harmonize_treatments","title":"Harmonize treatment components — harmonize_treatments","text":"Combines information stored tables treatment_id_info treatment_id_components time-series dataset describing combined experimental components every year.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_treatments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize treatment components — harmonize_treatments","text":"","code":"harmonize_treatments(db = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_treatments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize treatment components — harmonize_treatments","text":"db list database tables containing named dataframes treatment_id_info treatment_id_components. left NULL, tables imported Directus.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_treatments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize treatment components — harmonize_treatments","text":"data frame columns site, year, treatmentID1, treatmentID2 treatment types described table site_treatment_type_info","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_treatments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize treatment components — harmonize_treatments","text":"","code":"#not run: tcw <- harmonize_treatments()"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_treatments_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize treatment and unit information — harmonize_treatments_units","title":"Harmonize treatment and unit information — harmonize_treatments_units","text":"Combines information database tables describe treatment components applied experimental units years.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_treatments_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize treatment and unit information — harmonize_treatments_units","text":"","code":"harmonize_treatments_units(db = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_treatments_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize treatment and unit information — harmonize_treatments_units","text":"db list database tables containing named dataframes treatment_id_info, treatment_id_components, experimental_unit_treatments. left NULL, tables imported Directus.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_treatments_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize treatment and unit information — harmonize_treatments_units","text":"data frame one row per unit ID per year treatment components columns.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_treatments_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize treatment and unit information — harmonize_treatments_units","text":"","code":"# not run: trt_units <- harmonize_treatment_units()"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_weather.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize daily weather data — harmonize_weather","title":"Harmonize daily weather data — harmonize_weather","text":"Harmonize daily weather data","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_weather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize daily weather data — harmonize_weather","text":"","code":"harmonize_weather(weather_daily = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_weather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize daily weather data — harmonize_weather","text":"weather_daily dataframe corresponding weather_daily table DRIVES database. NULL, table downloaded Directus.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_weather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize daily weather data — harmonize_weather","text":"data frame mildly processed weather data weather variables separate columns (instead separate rows database). processed table also excludes weather_station_id, flag, uid columns original database table.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize crop yields — harmonize_yields","title":"Harmonize crop yields — harmonize_yields","text":"Performs initial data processing steps crop yield data. include: - Filling missing actual_crop_id expected_crop_id. - Calculating dry yield yield yield_percent_moisture (crops yields reported standardized moisture). - Adding TRUE FALSE column cover crops. - Optionally, function can reshape data wide format, multiple crop fractions (e.g., grain straw) separate columns instead separate rows, organized database. option may convenient harvest index calculations .","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize crop yields — harmonize_yields","text":"","code":"harmonize_yields(   crop_yields = NULL,   crop_fractions_as_columns = FALSE,   primary_crop_fractions = getOption(\"drivesR.primary_crop_fractions\") )"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize crop yields — harmonize_yields","text":"crop_yields data frame crop_yields table DRIVES database. left NULL, table downloaded via Directus API. crop_fractions_as_columns TRUE, multiple fractions crop organized separate columns. FALSE, multiple fractions crop organized separate rows, database table. primary_crop_fractions vector crop fractions select primary fraction, one. far, pertains grain tomato fruit. default set option drivesR.primary_crop_fractions.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize crop yields — harmonize_yields","text":"data frame lightly processed crop yield data. Information stored table used generate new columns, including dry yield (kg/ha) TRUE/FALSE column cover crops. crop_fractions_as_columns set TRUE, data describing fractions crop described separate columns, suffix _1 primary fraction _2, _3, etc. fractions.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize crop yields — harmonize_yields","text":"","code":"# not run: longyield <- harmonize_yields(crop_fractions_as_columns = FALSE) # not run: wideyield <- harmonize_yields(crop_fractions_as_columns = TRUE)"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_planting_harvest.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize yield with planting and harvest dates. — harmonize_yields_planting_harvest","title":"Harmonize yield with planting and harvest dates. — harmonize_yields_planting_harvest","text":"Harmonize yield planting harvest dates.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_planting_harvest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize yield with planting and harvest dates. — harmonize_yields_planting_harvest","text":"","code":"harmonize_yields_planting_harvest(   db = NULL,   primary_crop_fractions = getOption(\"drivesR.primary_crop_fractions\") )"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_planting_harvest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize yield with planting and harvest dates. — harmonize_yields_planting_harvest","text":"db Can provided named list database tables crop_yields, harvest_dates, planting_info. NULL (default) tables downloaded Directus.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_planting_harvest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize yield with planting and harvest dates. — harmonize_yields_planting_harvest","text":"harmonized data frame one row per unit/year/crop. ... multiple fractions per included separate columns  suffix _f1, _f2, etc. ...show component crops multiple planting dates. ... shows multiple harvest dates.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_planting_harvest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize yield with planting and harvest dates. — harmonize_yields_planting_harvest","text":"","code":"# not run: set_default_token(\"Bearer blahblahblah\") # not run: yph <- harmonize_yield_planting_harvest() # no db. # not run: yph <- harmonize_yield_planting_harvest(db) # if list is in the environment."},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_planting_harvest_treatments.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize crop yields with planting, harvest, and treatment data. — harmonize_yields_planting_harvest_treatments","title":"Harmonize crop yields with planting, harvest, and treatment data. — harmonize_yields_planting_harvest_treatments","text":"performs steps harmonize_treatment_units harmonize_yields_planting_harvest combines output.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_planting_harvest_treatments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize crop yields with planting, harvest, and treatment data. — harmonize_yields_planting_harvest_treatments","text":"","code":"harmonize_yields_planting_harvest_treatments(db = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_planting_harvest_treatments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize crop yields with planting, harvest, and treatment data. — harmonize_yields_planting_harvest_treatments","text":"db named list containing tables \"crop_yields\",\"harvest_dates\",\"planting_info\",\"treatment_id_info\",\"treatment_id_components\", \"experimental_unit_treatments\".","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_planting_harvest_treatments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize crop yields with planting, harvest, and treatment data. — harmonize_yields_planting_harvest_treatments","text":"single data frame combined output tables.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_treatments.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize yield data with experimental treatment data. — harmonize_yields_treatments","title":"Harmonize yield data with experimental treatment data. — harmonize_yields_treatments","text":"Harmonize yield data experimental treatment data.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_treatments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize yield data with experimental treatment data. — harmonize_yields_treatments","text":"","code":"harmonize_yields_treatments(db = NULL, crop_fractions_as_columns = FALSE)"},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_treatments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize yield data with experimental treatment data. — harmonize_yields_treatments","text":"db #' list database tables containing named dataframes treatment_id_info,  treatment_id_components, experimental_unit_treatments, crop_yields. left NULL, tables imported Directus. crop_fractions_as_columns #' TRUE, multiple fractions crop organized separate columns. FALSE, multiple fractions crop organized separate rows, database table.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_treatments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize yield data with experimental treatment data. — harmonize_yields_treatments","text":"dataframe yield data combined experimental treatment data, treatment type separate column. crop_fractions_as_columns set TRUE, data describing fractions crop described separate columns, suffix _1 primary fraction _2, _3, etc. fractions.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/harmonize_yields_treatments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize yield data with experimental treatment data. — harmonize_yields_treatments","text":"","code":"# not run: longyield <- harmonize_yields_treatments(crop_fractions_as_columns = FALSE) # not run: wideyield <- harmonize_yields(crop_fractions_as_columns = TRUE)"},{"path":"https://drives-project.github.io/drivesR/reference/httr_dry_run.html","id":null,"dir":"Reference","previous_headings":"","what":"API dry run — httr_dry_run","title":"API dry run — httr_dry_run","text":"Tests API request without sending . Useful troubleshooting.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/httr_dry_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API dry run — httr_dry_run","text":"","code":"httr_dry_run(r)"},{"path":"https://drives-project.github.io/drivesR/reference/httr_dry_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"API dry run — httr_dry_run","text":"r API request httr package. convenient piping.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/httr_dry_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API dry run — httr_dry_run","text":"","code":"testreq <- httr_dry_run(httr::GET(url = \"https://data.drives-network.org/collections\",               httr::add_headers(\"Authorization\" = \"Bearer {myAPItoken}\")))"},{"path":"https://drives-project.github.io/drivesR/reference/import_db_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Bulk download database tables — import_db_tables","title":"Bulk download database tables — import_db_tables","text":"Bulk download database tables","code":""},{"path":"https://drives-project.github.io/drivesR/reference/import_db_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bulk download database tables — import_db_tables","text":"","code":"import_db_tables(   tablevec = getOption(\"drivesR.default.tablevec\"),   fetch_option = c(\"download.save\", \"download.only\", \"save.only\", \"upload\")[1],   save_option = c(\"list\", \"rds\", \"csv\")[1],   savedir = \".\",   savename = \"drives\" )"},{"path":"https://drives-project.github.io/drivesR/reference/import_db_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bulk download database tables — import_db_tables","text":"tablevec vector table names download. NULL, function downloads DRIVES tables available user. fetch_option Indicates tables fetched stored. Options : \"download.save\": Tables imported via Directus API saved list object Rda file. \"download.\": Tables imported via Directus API object global environment. \"save.\": Tables downloaded one--one saved local path, without remaining global environment. may helpful systems limited working memory. \"upload\": function loads tables path specified savedir savename list global environment. download step takes , option saves time re-running script. save_option Determines files saved local system. Options \"list\" (default), \"rds\", \"csv\". \"list\" option combines tables single named list, db, saved RData file. \"rds\" \"csv\" options save table separate R data csv file within directory specified savedir. Although list option convenient coding, requires sufficient RAM store data working memory. working memory limiting, may better load tables individually, needed. fetch_option \"upload\", save_option match stored local file system. savedir Directory path saving locally. Defaults working directory. savename File prefix saving locally. save_option \"list\", entire file name, excluding extensions. Defaults \"drives\". save_option \"rds\" \"csv\", file name prefix followed table name, separated \"_\" (e.g., drives_crop_yields.csv).","code":""},{"path":"https://drives-project.github.io/drivesR/reference/import_db_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bulk download database tables — import_db_tables","text":"named list DRIVES database tables.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/import_db_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bulk download database tables — import_db_tables","text":"","code":"# importing tables to a list in the R envirnoment without saving: # not run: db <- import_db_tables(fetch_option = \"download.only\",save_option = \"list\")  # saving tables to separate files without keeping them in the R environment: # not run: db <- import_db_tables(fetch_option = \"save.only\",save_option = \"csv\") # in this case, the object db will be NULL.  # importing tables into a list in the R envinvment while saving as separate files: # not run: db <- import_db_tables(fetch_option = \"download.only\",save_option = \"csv\")   # uploading previously-saved tables into a named list:  # not run: db <- import_db_tables(fetch_option = \"upload\",save_option = \"csv\")"},{"path":"https://drives-project.github.io/drivesR/reference/import_dictionary_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Import dictionary tables These do not require an API key. — import_dictionary_tables","title":"Import dictionary tables These do not require an API key. — import_dictionary_tables","text":"Import dictionary tables require API key.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/import_dictionary_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import dictionary tables These do not require an API key. — import_dictionary_tables","text":"","code":"import_dictionary_tables()"},{"path":"https://drives-project.github.io/drivesR/reference/import_dictionary_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import dictionary tables These do not require an API key. — import_dictionary_tables","text":"myurl URL Directus database. Set default option (data.drives-network.org)","code":""},{"path":"https://drives-project.github.io/drivesR/reference/import_dictionary_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import dictionary tables These do not require an API key. — import_dictionary_tables","text":"list three dictionary tables. One describing database tables, one describing columns within tables, one describing categories within columns.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/import_dictionary_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import dictionary tables These do not require an API key. — import_dictionary_tables","text":"","code":"# not run: dict <- import_dictionary_tables()"},{"path":"https://drives-project.github.io/drivesR/reference/is.ISOdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if dates are in ISO format. — is.ISOdate","title":"Check if dates are in ISO format. — is.ISOdate","text":"Returns TRUE vector character string dates YYYY-MM-DD format recognized .Date. .Date recognizes - / separators. Also works single digit month day.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/is.ISOdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if dates are in ISO format. — is.ISOdate","text":"","code":"is.ISOdate(d, sepstr = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/is.ISOdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if dates are in ISO format. — is.ISOdate","text":"d vector dates character format sepstr Specified separator character (usually -). Useful applications recognize / separator.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/is.ISOdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if dates are in ISO format. — is.ISOdate","text":"vector TRUE FALSE indicating whether date ISO format. NAs returns NA.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/is.ISOdate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if dates are in ISO format. — is.ISOdate","text":"","code":"myd = c(\"2024-01-01\",\"2022/04/01\",\"2023-15-01\",\"6/23/22\",\"24-01-01\", NA,\"jbs\") cbind(myd, is.ISOdate(myd), is.ISOdate(myd, sep=\"-\")) #>      myd                          #> [1,] \"2024-01-01\" \"TRUE\"  \"TRUE\"  #> [2,] \"2022/04/01\" \"TRUE\"  \"FALSE\" #> [3,] \"2023-15-01\" \"FALSE\" \"FALSE\" #> [4,] \"6/23/22\"    \"FALSE\" \"FALSE\" #> [5,] \"24-01-01\"   \"TRUE\"  \"FALSE\" #> [6,] NA           NA      NA      #> [7,] \"jbs\"        \"FALSE\" \"FALSE\" is.ISOdate(myd) #> [1]  TRUE  TRUE FALSE FALSE  TRUE    NA FALSE"},{"path":"https://drives-project.github.io/drivesR/reference/is_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a number is an integer — is_integer","title":"Check if a number is an integer — is_integer","text":"Check number integer","code":""},{"path":"https://drives-project.github.io/drivesR/reference/is_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a number is an integer — is_integer","text":"","code":"is_integer(x, non_numbers_as_na = TRUE)"},{"path":"https://drives-project.github.io/drivesR/reference/is_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a number is an integer — is_integer","text":"x vector one values test. non_numbers_as_na vector coerced numeric checking integer. option set TRUE (default), non-numeric values vector returned NA. set FALSE, non-numeric values returned FALSE","code":""},{"path":"https://drives-project.github.io/drivesR/reference/kg_to_lb.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert weight from kg to lb. — kg_to_lb","title":"Convert weight from kg to lb. — kg_to_lb","text":"Convert weight kg lb.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/kg_to_lb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert weight from kg to lb. — kg_to_lb","text":"","code":"kg_to_lb(kg_wt)"},{"path":"https://drives-project.github.io/drivesR/reference/kg_to_lb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert weight from kg to lb. — kg_to_lb","text":"kg_wt Weight kg.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/kg_to_lb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert weight from kg to lb. — kg_to_lb","text":"Weight lb.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/kg_to_lb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert weight from kg to lb. — kg_to_lb","text":"","code":"kg_to_lb(1) #> [1] 2.204623 kg_to_lb(c(1,2,3)) #> [1] 2.204623 4.409246 6.613869"},{"path":"https://drives-project.github.io/drivesR/reference/lb_to_kg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert weight from pounds to kg — lb_to_kg","title":"Convert weight from pounds to kg — lb_to_kg","text":"Convert weight pounds kg","code":""},{"path":"https://drives-project.github.io/drivesR/reference/lb_to_kg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert weight from pounds to kg — lb_to_kg","text":"","code":"lb_to_kg(lb_wt)"},{"path":"https://drives-project.github.io/drivesR/reference/lb_to_kg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert weight from pounds to kg — lb_to_kg","text":"lb_wt Weight pounds.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/lb_to_kg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert weight from pounds to kg — lb_to_kg","text":"Weight kg.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/lb_to_kg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert weight from pounds to kg — lb_to_kg","text":"","code":"lb_to_kg(1); #> [1] 0.4535924 lb_to_kg(c(1,2,3)) #> [1] 0.4535924 0.9071848 1.3607772"},{"path":"https://drives-project.github.io/drivesR/reference/list_treatments_by_management_practice.html","id":null,"dir":"Reference","previous_headings":"","what":"List treatment components by management practice. — list_treatments_by_management_practice","title":"List treatment components by management practice. — list_treatments_by_management_practice","text":"Uses information site_treatment_type_info table","code":""},{"path":"https://drives-project.github.io/drivesR/reference/list_treatments_by_management_practice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List treatment components by management practice. — list_treatments_by_management_practice","text":"","code":"list_treatments_by_management_practice(site_treatment_type_info = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/list_treatments_by_management_practice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List treatment components by management practice. — list_treatments_by_management_practice","text":"site_treatment_type_info data frame site_treatment_type_info table. left NULL, table imported directus.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/list_treatments_by_management_practice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List treatment components by management practice. — list_treatments_by_management_practice","text":"named list treatment types corresponding set core management practices described sites. Useful identifying columns harmonized dataframes treatment types.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/list_treatments_by_management_practice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List treatment components by management practice. — list_treatments_by_management_practice","text":"","code":"#not run: management_practice_list <-  # list_treatments_by_management_practice() # not run: harmonized_treatments <-  # harmonize_treatments() # If I want to do something with N fertility treatments,  #for example. #not run: nfert <- harmonized_treatments[,c(\"site_id\",                                            #\"treatmentID2\",\"year\"                                           #,management_practice_list$`N fertility)]"},{"path":"https://drives-project.github.io/drivesR/reference/m_to_ft.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert length from meters to feet — m_to_ft","title":"Convert length from meters to feet — m_to_ft","text":"Convert length meters feet","code":""},{"path":"https://drives-project.github.io/drivesR/reference/m_to_ft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert length from meters to feet — m_to_ft","text":"","code":"m_to_ft(m_len)"},{"path":"https://drives-project.github.io/drivesR/reference/m_to_ft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert length from meters to feet — m_to_ft","text":"m_len Length meters","code":""},{"path":"https://drives-project.github.io/drivesR/reference/m_to_ft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert length from meters to feet — m_to_ft","text":"Length feet.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/m_to_ft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert length from meters to feet — m_to_ft","text":"","code":"m_to_ft(5); #> [1] 16.4042 m_to_ft(c(5,6,7)) #> [1] 16.40420 19.68504 22.96588"},{"path":"https://drives-project.github.io/drivesR/reference/make_collection_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a collection schema json object from data dictionary tables — make_collection_json","title":"Make a collection schema json object from data dictionary tables — make_collection_json","text":"Make collection schema json object data dictionary tables","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_collection_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a collection schema json object from data dictionary tables — make_collection_json","text":"","code":"make_collection_json(   columndf = test_column_dict[which(test_column_dict$table_name == \"test_cat_info\"), ],   tablerow = test_table_dict[1, ] )"},{"path":"https://drives-project.github.io/drivesR/reference/make_collection_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a collection schema json object from data dictionary tables — make_collection_json","text":"columndf dataframe schema information column (field) column dictionary. tablerow one-row dataframe schema information table (collection) table dictionary.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_collection_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a collection schema json object from data dictionary tables — make_collection_json","text":"character string corresponding data type recognized Directus API.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_collection_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a collection schema json object from data dictionary tables — make_collection_json","text":"","code":"my_collection_json <-  make_collection_json(columndf =                     test_column_dict[which(test_column_dict$table_name==                                             \"test_cat_info\"),],                                             test_table_dict[1,])"},{"path":"https://drives-project.github.io/drivesR/reference/make_field_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert column dictionary content into json-formatted field schema. This is for adding fields to existing collections. Once a collection exists, only one field can be added at a time with an API request. — make_field_json","title":"Convert column dictionary content into json-formatted field schema. This is for adding fields to existing collections. Once a collection exists, only one field can be added at a time with an API request. — make_field_json","text":"Convert column dictionary content json-formatted field schema. adding fields existing collections. collection exists, one field can added time API request.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_field_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert column dictionary content into json-formatted field schema. This is for adding fields to existing collections. Once a collection exists, only one field can be added at a time with an API request. — make_field_json","text":"","code":"make_field_json(column_dictionary_row = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/make_field_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert column dictionary content into json-formatted field schema. This is for adding fields to existing collections. Once a collection exists, only one field can be added at a time with an API request. — make_field_json","text":"column_dictionary_row row column dictionary, filled information new field.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_field_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert column dictionary content into json-formatted field schema. This is for adding fields to existing collections. Once a collection exists, only one field can be added at a time with an API request. — make_field_json","text":"json-formatted object containing schema information new field existing collection.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_field_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert column dictionary content into json-formatted field schema. This is for adding fields to existing collections. Once a collection exists, only one field can be added at a time with an API request. — make_field_json","text":"","code":"column_dictionary <- test_column_dict ## model the new field on an existing field (for demo purposes) newrow <- test_column_dict[which(test_column_dict$column_name == \"cat_name\"),] newrow$column_id <- \"test_cat_info:favorite_food\" newrow$column_name <- \"favorite_food\" newrowjson <- make_field_json(newrow) # not run: newfieldreq <- api_request(\"POST\",mytarget =\"fields/test_cat_info\",jsonbody= newrowjson)"},{"path":"https://drives-project.github.io/drivesR/reference/make_relations_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Make relations json schema objects from data dictionary tables — make_relations_json","title":"Make relations json schema objects from data dictionary tables — make_relations_json","text":"Make relations json schema objects data dictionary tables","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_relations_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make relations json schema objects from data dictionary tables — make_relations_json","text":"","code":"make_relations_json(   columndf = test_column_dict[which(test_column_dict$table_name ==     \"test_favorite_toy\"), ],   tablerow = test_table_dict[2, ],   update_action = \"CASCADE\",   delete_action = \"NO ACTION\" )"},{"path":"https://drives-project.github.io/drivesR/reference/make_relations_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make relations json schema objects from data dictionary tables — make_relations_json","text":"columndf dataframe schema information column (field) column dictionary. tablerow one-row dataframe schema information table (collection) table dictionary. update_action Action foreign key value modified original table. default CASCADE, means update cascade related records. ACTION prevents records modified dependent records delete_action Action foreign key deleted original table. default ACTION, prevents records modified dependent records. Another useful option might SET DEFAULT SET NULL.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_relations_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make relations json schema objects from data dictionary tables — make_relations_json","text":"list json objects. list must subsetted use api calls","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_relations_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make relations json schema objects from data dictionary tables — make_relations_json","text":"","code":"#testrel <- make_relations_json(columndf =   #                                 test_column_dict[   #                                which(test_column_dict$table_name==\"test_favorite_toy\"),],  #                                tablerow = test_table_dict[2,]) # If the table has multiple foreign keys, you can use this in a loop (lapply doesn't work) #not run: rel_req <- api_request(\"POST\",mytarget = \"relations\",jsonbody = testrel[[1]])"},{"path":"https://drives-project.github.io/drivesR/reference/make_row_insert_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a dataframe or tibble to a json object suitable to insert rows (items) Basically just the jsonlite::toJSON function with options set to non-defaults for conventience — make_row_insert_json","title":"Convert a dataframe or tibble to a json object suitable to insert rows (items) Basically just the jsonlite::toJSON function with options set to non-defaults for conventience — make_row_insert_json","text":"Convert dataframe tibble json object suitable insert rows (items) Basically just jsonlite::toJSON function options set non-defaults conventience","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_row_insert_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a dataframe or tibble to a json object suitable to insert rows (items) Basically just the jsonlite::toJSON function with options set to non-defaults for conventience — make_row_insert_json","text":"","code":"make_row_insert_json(mydf)"},{"path":"https://drives-project.github.io/drivesR/reference/make_row_insert_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a dataframe or tibble to a json object suitable to insert rows (items) Basically just the jsonlite::toJSON function with options set to non-defaults for conventience — make_row_insert_json","text":"mydf dataframe tibble quality control steps complete","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_row_insert_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a dataframe or tibble to a json object suitable to insert rows (items) Basically just the jsonlite::toJSON function with options set to non-defaults for conventience — make_row_insert_json","text":"prettified json object","code":""},{"path":"https://drives-project.github.io/drivesR/reference/make_row_insert_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a dataframe or tibble to a json object suitable to insert rows (items) Basically just the jsonlite::toJSON function with options set to non-defaults for conventience — make_row_insert_json","text":"","code":"testdf <- data.frame(x = 1:5, y = LETTERS[1:5]) insert_json <- make_row_insert_json(testdf) # example with API request: test_insert <- make_row_insert_json(test_cat_info) # insert_req <- api_request(\"POST\",\"items/test_cat_info\",test_insert)"},{"path":"https://drives-project.github.io/drivesR/reference/modify_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify content in existing rows — modify_rows","title":"Modify content in existing rows — modify_rows","text":"large number rows, may good idea run content changes QC functions performing step.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/modify_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify content in existing rows — modify_rows","text":"","code":"modify_rows(table_name = NULL, editdf = NULL, batchsize = 1000, idcol = \"uid\")"},{"path":"https://drives-project.github.io/drivesR/reference/modify_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify content in existing rows — modify_rows","text":"table_name Table identifier within Directus editdf data frame columns primary key whatever modified. batchsize Number rows complete per batch. Recommended cap 1000. idcol Name primary key column editdf.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/modify_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify content in existing rows — modify_rows","text":"Loops rows edit df performs PATCH request corresponding item database. patch request work, returns ids problem rows.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/modify_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify content in existing rows — modify_rows","text":"","code":"testdf1 <- data.frame( \"id\"=c(6,7,8), \"cat_name\"= c(\"Thing1\",\"Thing2\",\"Thing3\"),  \"cat_age\" = c(1,2,\"spam\")) # Not run: testpatch <- modify_rows( #table_name = \"test_cat_info\",  #editdf = testdf1, idcol = \"id\") # print(testpatch)  # id 8 will have a status_code 500  #error due to non-integer in cat_age testdf2 <- data.frame( \"id\"=c(6,7,8),  \"cat_name\"= c(\"Thing1\",\"Thing2\",\"Thing3\"), \"cat_age\" = c(1,2,3)) # Not run: testpatch <-  #modify_rows(table_name = \"test_cat_info\", editdf = testdf2, idcol = \"id\") # print(testpatch) # NULL with no errors."},{"path":"https://drives-project.github.io/drivesR/reference/order_rows_by_internal_fk.html","id":null,"dir":"Reference","previous_headings":"","what":"Order rows based on an internal foreign key For use in uploading rows to database tables. This specifies a row order for uploading that avoids violating internal foreign key constraints within a table. — order_rows_by_internal_fk","title":"Order rows based on an internal foreign key For use in uploading rows to database tables. This specifies a row order for uploading that avoids violating internal foreign key constraints within a table. — order_rows_by_internal_fk","text":"Order rows based internal foreign key use uploading rows database tables. specifies row order uploading avoids violating internal foreign key constraints within table.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/order_rows_by_internal_fk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order rows based on an internal foreign key For use in uploading rows to database tables. This specifies a row order for uploading that avoids violating internal foreign key constraints within a table. — order_rows_by_internal_fk","text":"","code":"order_rows_by_internal_fk(inputdf = NULL, idcol = NULL, fkcol = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/order_rows_by_internal_fk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order rows based on an internal foreign key For use in uploading rows to database tables. This specifies a row order for uploading that avoids violating internal foreign key constraints within a table. — order_rows_by_internal_fk","text":"inputdf dataframe rows added table internal foreign key constraint. idcol primary key column name (e.g., crop_id). fkcol internal foreign key column name (e.g., parent_crop_id)","code":""},{"path":"https://drives-project.github.io/drivesR/reference/order_rows_by_internal_fk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order rows based on an internal foreign key For use in uploading rows to database tables. This specifies a row order for uploading that avoids violating internal foreign key constraints within a table. — order_rows_by_internal_fk","text":"vector row indices inputdf, indicating order added .","code":""},{"path":"https://drives-project.github.io/drivesR/reference/order_rows_by_internal_fk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order rows based on an internal foreign key For use in uploading rows to database tables. This specifies a row order for uploading that avoids violating internal foreign key constraints within a table. — order_rows_by_internal_fk","text":"","code":"#not run: roworder <- order_rows_by_internal_fk( #inputdf = crop_info,idcol = \"crop_id\",fkcol = \"parent_crop_id\") # not run: walk(roworder,~post_rows(\"crop_info\",inputdf[.x,] ))"},{"path":"https://drives-project.github.io/drivesR/reference/order_tables_by_fk.html","id":null,"dir":"Reference","previous_headings":"","what":"Order tables by foreign key dependencies This is used for posting items to collections with foreign key constraints. This is to help determine the order of items to post to avoid foreign key violations. Tables with internal foreign keys should use order_rows_by_internal_fk — order_tables_by_fk","title":"Order tables by foreign key dependencies This is used for posting items to collections with foreign key constraints. This is to help determine the order of items to post to avoid foreign key violations. Tables with internal foreign keys should use order_rows_by_internal_fk — order_tables_by_fk","text":"Order tables foreign key dependencies used posting items collections foreign key constraints. help determine order items post avoid foreign key violations. Tables internal foreign keys use order_rows_by_internal_fk","code":""},{"path":"https://drives-project.github.io/drivesR/reference/order_tables_by_fk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order tables by foreign key dependencies This is used for posting items to collections with foreign key constraints. This is to help determine the order of items to post to avoid foreign key violations. Tables with internal foreign keys should use order_rows_by_internal_fk — order_tables_by_fk","text":"","code":"order_tables_by_fk(column_dictionary = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/order_tables_by_fk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order tables by foreign key dependencies This is used for posting items to collections with foreign key constraints. This is to help determine the order of items to post to avoid foreign key violations. Tables with internal foreign keys should use order_rows_by_internal_fk — order_tables_by_fk","text":"column_dictionary subset column_dictionary describing tables ordered.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/order_tables_by_fk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order tables by foreign key dependencies This is used for posting items to collections with foreign key constraints. This is to help determine the order of items to post to avoid foreign key violations. Tables with internal foreign keys should use order_rows_by_internal_fk — order_tables_by_fk","text":"data frame table names order compatible -table foreign key constraints, along TRUE/FALSE column indicating tables internal foreign keys.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/pg_to_directus_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Map data types from Postgresql to Directus schema — pg_to_directus_type","title":"Map data types from Postgresql to Directus schema — pg_to_directus_type","text":"Map data types Postgresql Directus schema","code":""},{"path":"https://drives-project.github.io/drivesR/reference/pg_to_directus_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map data types from Postgresql to Directus schema — pg_to_directus_type","text":"","code":"pg_to_directus_type(pgtype)"},{"path":"https://drives-project.github.io/drivesR/reference/pg_to_directus_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map data types from Postgresql to Directus schema — pg_to_directus_type","text":"pgtype postgres data type specified column dictionary","code":""},{"path":"https://drives-project.github.io/drivesR/reference/pg_to_directus_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map data types from Postgresql to Directus schema — pg_to_directus_type","text":"character string corresponding datatype recognized Directus API.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/pg_to_directus_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map data types from Postgresql to Directus schema — pg_to_directus_type","text":"","code":"pg_to_directus_type(\"array\") #> [1] \"text\""},{"path":"https://drives-project.github.io/drivesR/reference/post_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add rows to a database table — post_rows","title":"Add rows to a database table — post_rows","text":"adds rows input dataframe single API request. add 100 rows, use post_rows_in_batches. use interactive R session.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/post_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add rows to a database table — post_rows","text":"","code":"post_rows(table_name = NULL, inputdf = NULL)"},{"path":"https://drives-project.github.io/drivesR/reference/post_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add rows to a database table — post_rows","text":"table_name name database table. inputdf dataframe containing rows added. Contents checked.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/post_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add rows to a database table — post_rows","text":"Converts input df json runs API post request specified table. status code request returned message.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/post_rows_in_batches.html","id":null,"dir":"Reference","previous_headings":"","what":"Post rows in batches — post_rows_in_batches","title":"Post rows in batches — post_rows_in_batches","text":"get around issues posting limits.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/post_rows_in_batches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post rows in batches — post_rows_in_batches","text":"","code":"post_rows_in_batches(   table_name = \"crop_yields\",   inputdf = NULL,   batchsize = 1000 )"},{"path":"https://drives-project.github.io/drivesR/reference/post_rows_in_batches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post rows in batches — post_rows_in_batches","text":"table_name Table identifier database. inputdf Data frame rows added. passed quality control checks. batchsize Number rows added time. Suggested amount 1000 rows. Progress printed console.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/post_rows_in_batches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post rows in batches — post_rows_in_batches","text":"Silent.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/print_stringvec_as_commasep.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a character vector as a list of quoted strings separated by commas. — print_stringvec_as_commasep","title":"Print a character vector as a list of quoted strings separated by commas. — print_stringvec_as_commasep","text":"Usually something use trim excess names data frame.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/print_stringvec_as_commasep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a character vector as a list of quoted strings separated by commas. — print_stringvec_as_commasep","text":"","code":"print_stringvec_as_commasep(mystringvec)"},{"path":"https://drives-project.github.io/drivesR/reference/print_stringvec_as_commasep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a character vector as a list of quoted strings separated by commas. — print_stringvec_as_commasep","text":"mystringvec character vector.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/print_stringvec_as_commasep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a character vector as a list of quoted strings separated by commas. — print_stringvec_as_commasep","text":"character vector printed console way can copied vector code.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/print_stringvec_as_commasep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a character vector as a list of quoted strings separated by commas. — print_stringvec_as_commasep","text":"","code":"df1 <- as.data.frame(matrix(1:26, nrow = 1, ncol = 26, dimnames = list(NULL,LETTERS))); print_stringvec_as_commasep(LETTERS); #> 'A' ,'B' ,'C' ,'D' ,'E' ,'F' ,'G' ,'H' ,'I' ,'J' ,'K' ,'L' ,'M' ,'N' ,'O' ,'P' ,'Q' ,'R' ,'S' ,'T' ,'U' ,'V' ,'W' ,'X' ,'Y' ,'Z' # Copy the output into the script, remove a handful of values I don't want # for whatever arbitrary, difficult-to-code reason. colsIWant <- c(\"A\" ,\"B\" ,\"C\" ,\"D\" ,\"M\"  ,\"S\" ,\"T\" ,\"U\" ,\"V\" ,\"W\" ,\"X\" ,\"Y\" ,\"Z\"); df2 <- df1[,colsIWant]"},{"path":"https://drives-project.github.io/drivesR/reference/query_table_by_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch table contents by primary keys Function to query contents of a database table with a vector of primary key values. Useful for double-checking before running 'modify_rows' or 'delete_rows'. It could be useful for querying information across tables. — query_table_by_pk","title":"Fetch table contents by primary keys Function to query contents of a database table with a vector of primary key values. Useful for double-checking before running 'modify_rows' or 'delete_rows'. It could be useful for querying information across tables. — query_table_by_pk","text":"Fetch table contents primary keys Function query contents database table vector primary key values. Useful double-checking running 'modify_rows' 'delete_rows'. useful querying information across tables.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/query_table_by_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch table contents by primary keys Function to query contents of a database table with a vector of primary key values. Useful for double-checking before running 'modify_rows' or 'delete_rows'. It could be useful for querying information across tables. — query_table_by_pk","text":"","code":"query_table_by_pk(   table_name = NULL,   pkvec = NULL,   pkfield = \"uid\",   public = getOption(\"drivesR.default.public\"),   public_tables = getOption(\"drivesR.default.tablevec\") )"},{"path":"https://drives-project.github.io/drivesR/reference/query_table_by_pk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch table contents by primary keys Function to query contents of a database table with a vector of primary key values. Useful for double-checking before running 'modify_rows' or 'delete_rows'. It could be useful for querying information across tables. — query_table_by_pk","text":"table_name table identifier DRIVES database. public = TRUE, table name automatically modified query public version database table. pkvec vector primary key values. pkfield name column name holds table's primary key. tables, 'uid'. public TRUE, function queries publicly available data tables. Since function mostly internal use, default FALSE. public_tables Vector tables receive public_ prefix public==TRUE. Set global default.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/query_table_by_pk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch table contents by primary keys Function to query contents of a database table with a vector of primary key values. Useful for double-checking before running 'modify_rows' or 'delete_rows'. It could be useful for querying information across tables. — query_table_by_pk","text":"","code":"#not run: qtable <- query_table_by_pk(\"harvest_dates\",pkvec = 1:100, pkfield = \"uid)"},{"path":"https://drives-project.github.io/drivesR/reference/set_default_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Set default API token — set_default_token","title":"Set default API token — set_default_token","text":"Set user-specific API token default functions making API requests. works R studio.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/set_default_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set default API token — set_default_token","text":"","code":"set_default_token(usertoken, api = c(\"Directus\", \"Dataverse\")[1])"},{"path":"https://drives-project.github.io/drivesR/reference/set_default_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set default API token — set_default_token","text":"usertoken User-specific API token. directus, formated \"Bearer myAPI token\". Dataverse, string letters numbers. api Sets API set token . Default \"Directus\". \"Dataverse\" also option (troubleshooting non-published tables Canadian repository).","code":""},{"path":"https://drives-project.github.io/drivesR/reference/set_default_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set default API token — set_default_token","text":"Send Resets default api token relevant functions drivesR.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/set_default_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set default API token — set_default_token","text":"","code":"directus_token = \"Bearer abunchofnumbersandletters\" ## This token should be read from a script or text file that is not synced to github  # see what defaults are before and after running formals(api_request)$mytoken # shows name of option used to set default. #> getOption(\"drivesR.default.directustoken\") getOption(\"drivesR.default.directustoken\") # shows default option. #> NULL # Not run: set_default_token(directus_token) getOption(\"drivesR.default.directustoken\") # shows new default #> NULL"},{"path":"https://drives-project.github.io/drivesR/reference/set_public_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Set default public access settings This can be used to change the default public access settings from what is set up during package loading. For the publicly-released package, the default will be public access. — set_public_access","title":"Set default public access settings This can be used to change the default public access settings from what is set up during package loading. For the publicly-released package, the default will be public access. — set_public_access","text":"Set default public access settings can used change default public access settings set package loading. publicly-released package, default public access.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/set_public_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set default public access settings This can be used to change the default public access settings from what is set up during package loading. For the publicly-released package, the default will be public access. — set_public_access","text":"","code":"set_public_access(public = TRUE)"},{"path":"https://drives-project.github.io/drivesR/reference/set_public_access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set default public access settings This can be used to change the default public access settings from what is set up during package loading. For the publicly-released package, the default will be public access. — set_public_access","text":"public TRUE public access, FALSE private access.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/set_public_access.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set default public access settings This can be used to change the default public access settings from what is set up during package loading. For the publicly-released package, the default will be public access. — set_public_access","text":"Changes option \"drivesR.default.directustoken\" used various functions.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/test_api_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify Directus API token Used within other functions to check for errors. — test_api_token","title":"Verify Directus API token Used within other functions to check for errors. — test_api_token","text":"Verify Directus API token Used within functions check errors.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/test_api_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify Directus API token Used within other functions to check for errors. — test_api_token","text":"","code":"test_api_token(   mytoken = getOption(\"drivesR.default.directustoken\"),   myurl = getOption(\"drivesR.default.url\"),   silent = TRUE )"},{"path":"https://drives-project.github.io/drivesR/reference/test_api_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify Directus API token Used within other functions to check for errors. — test_api_token","text":"mytoken Directus API token, formatted \"Bearer APItoken.\" myurl Directus database url. Set defaults https://data.drives-network.org silent Indicates whether messages printed. Default FALSE.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/test_api_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify Directus API token Used within other functions to check for errors. — test_api_token","text":"TRUE FALSE indicating whether mytoken produces successful api request.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/test_api_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verify Directus API token Used within other functions to check for errors. — test_api_token","text":"","code":"test_api_token(mytoken = \"notavalidtoken\", silent=FALSE) #> Invalid API token #> [1] FALSE"},{"path":"https://drives-project.github.io/drivesR/reference/test_category_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample category dictionary — test_category_dict","title":"Sample category dictionary — test_category_dict","text":"data frame database schema information representative DRIVES tables.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/test_category_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample category dictionary — test_category_dict","text":"","code":"test_category_dict"},{"path":"https://drives-project.github.io/drivesR/reference/test_category_dict.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample category dictionary — test_category_dict","text":"data frame 3 rows 4 variables: table_name Table identifier column_name Column identifier within table category_level Options category description Text","code":""},{"path":"https://drives-project.github.io/drivesR/reference/test_column_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample column dictionary — test_column_dict","title":"Sample column dictionary — test_column_dict","text":"data frame database schema information representative DRIVES tables.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/test_column_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample column dictionary — test_column_dict","text":"","code":"test_column_dict"},{"path":"https://drives-project.github.io/drivesR/reference/test_column_dict.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample column dictionary — test_column_dict","text":"data frame 8 rows 14 variables: column_id Unique column identifier table_name Table identifier column_name Name column within table column_order Integer description Text postgres_data_type Text category primary_key TRUE FALSE record_identifier TRUE FALSE foreign_key_table Table name NA foreign_key_column Column name NA nullable TRUE FALSE unique_value TRUE FALSE is_category TRUE FALSE auto_increment TRUE FALSE","code":""},{"path":"https://drives-project.github.io/drivesR/reference/test_table_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample table dictionary — test_table_dict","title":"Sample table dictionary — test_table_dict","text":"data frame database schema information representative DRIVES tables.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/test_table_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample table dictionary — test_table_dict","text":"","code":"test_table_dict"},{"path":"https://drives-project.github.io/drivesR/reference/test_table_dict.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample table dictionary — test_table_dict","text":"data frame 2 rows 4 variables: data_type test table_name Table identifier description Text organization Text","code":""},{"path":"https://drives-project.github.io/drivesR/reference/unitacre_to_unithectare.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert any unit per acre area to the same unit per hectare area — unitacre_to_unithectare","title":"Convert any unit per acre area to the same unit per hectare area — unitacre_to_unithectare","text":"Convert unit per acre area unit per hectare area","code":""},{"path":"https://drives-project.github.io/drivesR/reference/unitacre_to_unithectare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert any unit per acre area to the same unit per hectare area — unitacre_to_unithectare","text":"","code":"unitacre_to_unithectare(unitacre)"},{"path":"https://drives-project.github.io/drivesR/reference/unitacre_to_unithectare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert any unit per acre area to the same unit per hectare area — unitacre_to_unithectare","text":"unitacre value numeric vectors per-acre unit, e.g., seeds/acre.","code":""},{"path":"https://drives-project.github.io/drivesR/reference/unitacre_to_unithectare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert any unit per acre area to the same unit per hectare area — unitacre_to_unithectare","text":"value numeric  vector equivalent per-hectare unit, e.g., seeds/ha","code":""}]
